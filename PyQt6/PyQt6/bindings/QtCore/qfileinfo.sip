// qfileinfo.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2022 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QFileInfo
{
%TypeHeaderCode
#include <qfileinfo.h>
%End

public:
    QFileInfo();
    explicit QFileInfo(const QFileDevice &file);
    explicit QFileInfo(const QString &file);
    QFileInfo(const QDir &dir, const QString &file);
    QFileInfo(const QFileInfo &fileinfo);
    ~QFileInfo();
    bool operator==(const QFileInfo &fileinfo) const;
    bool operator!=(const QFileInfo &fileinfo) const;
    void setFile(const QString &file);
    void setFile(const QFileDevice &file);
    void setFile(const QDir &dir, const QString &file);
    bool exists() const;
    void refresh();
    QString filePath() const;
    SIP_PYOBJECT __fspath__();
%MethodCode
        sipRes = qpycore_PyObject_FromQString(QDir::toNativeSeparators(sipCpp->filePath()));
%End

    QString absoluteFilePath() const;
    QString canonicalFilePath() const;
    QString fileName() const;
    QString baseName() const;
    QString completeBaseName() const;
    QString suffix() const;
    QString completeSuffix() const;
    QString path() const;
    QString absolutePath() const;
    QString canonicalPath() const;
    QDir dir() const;
    QDir absoluteDir() const;
    bool isReadable() const;
    bool isWritable() const;
    bool isExecutable() const;
    bool isHidden() const;
    bool isRelative() const;
    bool isAbsolute() const;
    bool makeAbsolute();
    bool isFile() const;
    bool isDir() const;
    bool isSymLink() const;
    bool isRoot() const;
    QString owner() const;
    uint ownerId() const;
    QString group() const;
    uint groupId() const;
    bool permission(QFileDevice::Permissions permissions) const;
    QFileDevice::Permissions permissions() const;
    qint64 size() const;
    QDateTime lastModified() const;
    QDateTime lastRead() const;
    bool caching() const;
    void setCaching(bool on);
    QString symLinkTarget() const;
    QString bundleName() const;
    bool isBundle() const;
    bool isNativePath() const;
    void swap(QFileInfo &other /Constrained/);
    static bool exists(const QString &file);
    QDateTime birthTime() const;
    QDateTime metadataChangeTime() const;
    QDateTime fileTime(QFileDevice::FileTime time) const;
    bool isSymbolicLink() const;
    bool isShortcut() const;
    bool isJunction() const;
    void stat();
%If (Qt_6_2_0 -)
    QString junctionTarget() const;
%End
};

typedef QList<QFileInfo> QFileInfoList;
