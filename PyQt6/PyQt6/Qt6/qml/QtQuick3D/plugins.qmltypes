import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/qquick3dabstractlight_p.h"
        name: "QQuick3DAbstractLight"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Light 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "QSSGShadowMapQuality"
            values: [
                "ShadowMapQualityLow",
                "ShadowMapQualityMedium",
                "ShadowMapQualityHigh",
                "ShadowMapQualityVeryHigh"
            ]
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 0
        }
        Property {
            name: "ambientColor"
            type: "QColor"
            read: "ambientColor"
            write: "setAmbientColor"
            notify: "ambientColorChanged"
            index: 1
        }
        Property {
            name: "brightness"
            type: "float"
            read: "brightness"
            write: "setBrightness"
            notify: "brightnessChanged"
            index: 2
        }
        Property {
            name: "scope"
            type: "QQuick3DNode"
            isPointer: true
            read: "scope"
            write: "setScope"
            notify: "scopeChanged"
            index: 3
        }
        Property {
            name: "castsShadow"
            type: "bool"
            read: "castsShadow"
            write: "setCastsShadow"
            notify: "castsShadowChanged"
            index: 4
        }
        Property {
            name: "shadowBias"
            type: "float"
            read: "shadowBias"
            write: "setShadowBias"
            notify: "shadowBiasChanged"
            index: 5
        }
        Property {
            name: "shadowFactor"
            type: "float"
            read: "shadowFactor"
            write: "setShadowFactor"
            notify: "shadowFactorChanged"
            index: 6
        }
        Property {
            name: "shadowMapQuality"
            type: "QSSGShadowMapQuality"
            read: "shadowMapQuality"
            write: "setShadowMapQuality"
            notify: "shadowMapQualityChanged"
            index: 7
        }
        Property {
            name: "shadowMapFar"
            type: "float"
            read: "shadowMapFar"
            write: "setShadowMapFar"
            notify: "shadowMapFarChanged"
            index: 8
        }
        Property {
            name: "shadowFilter"
            type: "float"
            read: "shadowFilter"
            write: "setShadowFilter"
            notify: "shadowFilterChanged"
            index: 9
        }
        Signal { name: "colorChanged" }
        Signal { name: "ambientColorChanged" }
        Signal { name: "brightnessChanged" }
        Signal { name: "scopeChanged" }
        Signal { name: "castsShadowChanged" }
        Signal { name: "shadowBiasChanged" }
        Signal { name: "shadowFactorChanged" }
        Signal { name: "shadowMapQualityChanged" }
        Signal { name: "shadowMapFarChanged" }
        Signal { name: "shadowFilterChanged" }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setAmbientColor"
            Parameter { name: "ambientColor"; type: "QColor" }
        }
        Method {
            name: "setBrightness"
            Parameter { name: "brightness"; type: "float" }
        }
        Method {
            name: "setScope"
            Parameter { name: "scope"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setCastsShadow"
            Parameter { name: "castsShadow"; type: "bool" }
        }
        Method {
            name: "setShadowBias"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Method {
            name: "setShadowFactor"
            Parameter { name: "shadowFactor"; type: "float" }
        }
        Method {
            name: "setShadowMapQuality"
            Parameter { name: "shadowMapQuality"; type: "QQuick3DAbstractLight::QSSGShadowMapQuality" }
        }
        Method {
            name: "setShadowMapFar"
            Parameter { name: "shadowMapFar"; type: "float" }
        }
        Method {
            name: "setShadowFilter"
            Parameter { name: "shadowFilter"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dcamera_p.h"
        name: "QQuick3DCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Camera 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Property {
            name: "frustumCullingEnabled"
            type: "bool"
            read: "frustumCullingEnabled"
            write: "setFrustumCullingEnabled"
            notify: "frustumCullingEnabledChanged"
            index: 0
        }
        Signal { name: "frustumCullingEnabledChanged" }
        Method {
            name: "setFrustumCullingEnabled"
            Parameter { name: "frustumCullingEnabled"; type: "bool" }
        }
        Method {
            name: "mapToViewport"
            type: "QVector3D"
            Parameter { name: "scenePos"; type: "QVector3D" }
        }
        Method {
            name: "mapFromViewport"
            type: "QVector3D"
            Parameter { name: "viewportPos"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            Parameter { name: "scenePos"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            Parameter { name: "node"; type: "QQuick3DNode"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dcustomcamera_p.h"
        name: "QQuick3DCustomCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DCamera"
        exports: ["QtQuick3D/CustomCamera 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "projection"
            type: "QMatrix4x4"
            read: "projection"
            write: "setProjection"
            notify: "projectionChanged"
            index: 0
        }
        Signal { name: "projectionChanged" }
        Method {
            name: "setProjection"
            Parameter { name: "projection"; type: "QMatrix4x4" }
        }
    }
    Component {
        file: "private/qquick3dcustommaterial_p.h"
        name: "QQuick3DCustomMaterial"
        accessSemantics: "reference"
        prototype: "QQuick3DMaterial"
        exports: ["QtQuick3D/CustomMaterial 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "ShadingMode"
            values: ["Unshaded", "Shaded"]
        }
        Enum {
            name: "BlendMode"
            values: [
                "NoBlend",
                "Zero",
                "One",
                "SrcColor",
                "OneMinusSrcColor",
                "DstColor",
                "OneMinusDstColor",
                "SrcAlpha",
                "OneMinusSrcAlpha",
                "DstAlpha",
                "OneMinusDstAlpha",
                "ConstantColor",
                "OneMinusConstantColor",
                "ConstantAlpha",
                "OneMinusConstantAlpha",
                "SrcAlphaSaturate"
            ]
        }
        Property {
            name: "shadingMode"
            type: "ShadingMode"
            read: "shadingMode"
            write: "setShadingMode"
            notify: "shadingModeChanged"
            index: 0
        }
        Property {
            name: "fragmentShader"
            type: "QUrl"
            read: "fragmentShader"
            write: "setFragmentShader"
            notify: "fragmentShaderChanged"
            index: 1
        }
        Property {
            name: "vertexShader"
            type: "QUrl"
            read: "vertexShader"
            write: "setVertexShader"
            notify: "vertexShaderChanged"
            index: 2
        }
        Property {
            name: "sourceBlend"
            type: "BlendMode"
            read: "srcBlend"
            write: "setSrcBlend"
            notify: "srcBlendChanged"
            index: 3
        }
        Property {
            name: "destinationBlend"
            type: "BlendMode"
            read: "dstBlend"
            write: "setDstBlend"
            notify: "dstBlendChanged"
            index: 4
        }
        Property {
            name: "alwaysDirty"
            type: "bool"
            read: "alwaysDirty"
            write: "setAlwaysDirty"
            notify: "alwaysDirtyChanged"
            index: 5
        }
        Property {
            name: "lineWidth"
            type: "float"
            read: "lineWidth"
            write: "setLineWidth"
            notify: "lineWidthChanged"
            index: 6
        }
        Signal { name: "shadingModeChanged" }
        Signal { name: "vertexShaderChanged" }
        Signal { name: "fragmentShaderChanged" }
        Signal { name: "srcBlendChanged" }
        Signal { name: "dstBlendChanged" }
        Signal { name: "alwaysDirtyChanged" }
        Signal { name: "lineWidthChanged" }
        Method {
            name: "setShadingMode"
            Parameter { name: "mode"; type: "QQuick3DCustomMaterial::ShadingMode" }
        }
        Method {
            name: "setVertexShader"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "setFragmentShader"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "setSrcBlend"
            Parameter { name: "mode"; type: "QQuick3DCustomMaterial::BlendMode" }
        }
        Method {
            name: "setDstBlend"
            Parameter { name: "mode"; type: "QQuick3DCustomMaterial::BlendMode" }
        }
        Method {
            name: "setAlwaysDirty"
            Parameter { name: "alwaysDirty"; type: "bool" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "width"; type: "float" }
        }
        Method { name: "onPropertyDirty" }
        Method { name: "onTextureDirty" }
    }
    Component {
        file: "private/qquick3ddefaultmaterial_p.h"
        name: "QQuick3DDefaultMaterial"
        accessSemantics: "reference"
        prototype: "QQuick3DMaterial"
        exports: ["QtQuick3D/DefaultMaterial 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Lighting"
            values: ["NoLighting", "FragmentLighting"]
        }
        Enum {
            name: "BlendMode"
            values: ["SourceOver", "Screen", "Multiply"]
        }
        Enum {
            name: "SpecularModel"
            values: ["Default", "KGGX"]
        }
        Property {
            name: "lighting"
            type: "Lighting"
            read: "lighting"
            write: "setLighting"
            notify: "lightingChanged"
            index: 0
        }
        Property {
            name: "blendMode"
            type: "BlendMode"
            read: "blendMode"
            write: "setBlendMode"
            notify: "blendModeChanged"
            index: 1
        }
        Property {
            name: "diffuseColor"
            type: "QColor"
            read: "diffuseColor"
            write: "setDiffuseColor"
            notify: "diffuseColorChanged"
            index: 2
        }
        Property {
            name: "diffuseMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "diffuseMap"
            write: "setDiffuseMap"
            notify: "diffuseMapChanged"
            index: 3
        }
        Property {
            name: "emissiveFactor"
            type: "QVector3D"
            read: "emissiveFactor"
            write: "setEmissiveFactor"
            notify: "emissiveFactorChanged"
            index: 4
        }
        Property {
            name: "emissiveMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "emissiveMap"
            write: "setEmissiveMap"
            notify: "emissiveMapChanged"
            index: 5
        }
        Property {
            name: "specularReflectionMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "specularReflectionMap"
            write: "setSpecularReflectionMap"
            notify: "specularReflectionMapChanged"
            index: 6
        }
        Property {
            name: "specularMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "specularMap"
            write: "setSpecularMap"
            notify: "specularMapChanged"
            index: 7
        }
        Property {
            name: "specularModel"
            type: "SpecularModel"
            read: "specularModel"
            write: "setSpecularModel"
            notify: "specularModelChanged"
            index: 8
        }
        Property {
            name: "specularTint"
            type: "QColor"
            read: "specularTint"
            write: "setSpecularTint"
            notify: "specularTintChanged"
            index: 9
        }
        Property {
            name: "indexOfRefraction"
            type: "float"
            read: "indexOfRefraction"
            write: "setIndexOfRefraction"
            notify: "indexOfRefractionChanged"
            index: 10
        }
        Property {
            name: "fresnelPower"
            type: "float"
            read: "fresnelPower"
            write: "setFresnelPower"
            notify: "fresnelPowerChanged"
            index: 11
        }
        Property {
            name: "specularAmount"
            type: "float"
            read: "specularAmount"
            write: "setSpecularAmount"
            notify: "specularAmountChanged"
            index: 12
        }
        Property {
            name: "specularRoughness"
            type: "float"
            read: "specularRoughness"
            write: "setSpecularRoughness"
            notify: "specularRoughnessChanged"
            index: 13
        }
        Property {
            name: "roughnessMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "roughnessMap"
            write: "setRoughnessMap"
            notify: "roughnessMapChanged"
            index: 14
        }
        Property {
            name: "roughnessChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "roughnessChannel"
            write: "setRoughnessChannel"
            notify: "roughnessChannelChanged"
            index: 15
        }
        Property {
            name: "opacity"
            type: "float"
            read: "opacity"
            write: "setOpacity"
            notify: "opacityChanged"
            index: 16
        }
        Property {
            name: "opacityMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "opacityMap"
            write: "setOpacityMap"
            notify: "opacityMapChanged"
            index: 17
        }
        Property {
            name: "opacityChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "opacityChannel"
            write: "setOpacityChannel"
            notify: "opacityChannelChanged"
            index: 18
        }
        Property {
            name: "bumpMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "bumpMap"
            write: "setBumpMap"
            notify: "bumpMapChanged"
            index: 19
        }
        Property {
            name: "bumpAmount"
            type: "float"
            read: "bumpAmount"
            write: "setBumpAmount"
            notify: "bumpAmountChanged"
            index: 20
        }
        Property {
            name: "normalMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "normalMap"
            write: "setNormalMap"
            notify: "normalMapChanged"
            index: 21
        }
        Property {
            name: "translucencyMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "translucencyMap"
            write: "setTranslucencyMap"
            notify: "translucencyMapChanged"
            index: 22
        }
        Property {
            name: "translucencyChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "translucencyChannel"
            write: "setTranslucencyChannel"
            notify: "translucencyChannelChanged"
            index: 23
        }
        Property {
            name: "translucentFalloff"
            type: "float"
            read: "translucentFalloff"
            write: "setTranslucentFalloff"
            notify: "translucentFalloffChanged"
            index: 24
        }
        Property {
            name: "diffuseLightWrap"
            type: "float"
            read: "diffuseLightWrap"
            write: "setDiffuseLightWrap"
            notify: "diffuseLightWrapChanged"
            index: 25
        }
        Property {
            name: "vertexColorsEnabled"
            type: "bool"
            read: "vertexColorsEnabled"
            write: "setVertexColorsEnabled"
            notify: "vertexColorsEnabledChanged"
            index: 26
        }
        Property {
            name: "pointSize"
            type: "float"
            read: "pointSize"
            write: "setPointSize"
            notify: "pointSizeChanged"
            index: 27
        }
        Property {
            name: "lineWidth"
            type: "float"
            read: "lineWidth"
            write: "setLineWidth"
            notify: "lineWidthChanged"
            index: 28
        }
        Signal {
            name: "lightingChanged"
            Parameter { name: "lighting"; type: "QQuick3DDefaultMaterial::Lighting" }
        }
        Signal {
            name: "blendModeChanged"
            Parameter { name: "blendMode"; type: "QQuick3DDefaultMaterial::BlendMode" }
        }
        Signal {
            name: "diffuseColorChanged"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Signal {
            name: "diffuseMapChanged"
            Parameter { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveFactorChanged"
            Parameter { name: "emissiveFactor"; type: "QVector3D" }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularReflectionMapChanged"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularMapChanged"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularModelChanged"
            Parameter { name: "specularModel"; type: "QQuick3DDefaultMaterial::SpecularModel" }
        }
        Signal {
            name: "specularTintChanged"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Signal {
            name: "indexOfRefractionChanged"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Signal {
            name: "fresnelPowerChanged"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Signal {
            name: "specularAmountChanged"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Signal {
            name: "specularRoughnessChanged"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Signal {
            name: "roughnessMapChanged"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityMapChanged"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "bumpMapChanged"
            Parameter { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "bumpAmountChanged"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "translucencyMapChanged"
            Parameter { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "translucentFalloffChanged"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Signal {
            name: "diffuseLightWrapChanged"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Signal {
            name: "vertexColorsEnabledChanged"
            Parameter { name: "vertexColorsEnabled"; type: "bool" }
        }
        Signal {
            name: "roughnessChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "opacityChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "translucencyChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal { name: "pointSizeChanged" }
        Signal { name: "lineWidthChanged" }
        Method {
            name: "setLighting"
            Parameter { name: "lighting"; type: "QQuick3DDefaultMaterial::Lighting" }
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "QQuick3DDefaultMaterial::BlendMode" }
        }
        Method {
            name: "setDiffuseColor"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Method {
            name: "setDiffuseMap"
            Parameter { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveFactor"
            Parameter { name: "emissiveFactor"; type: "QVector3D" }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularReflectionMap"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularMap"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularModel"
            Parameter { name: "specularModel"; type: "QQuick3DDefaultMaterial::SpecularModel" }
        }
        Method {
            name: "setSpecularTint"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Method {
            name: "setIndexOfRefraction"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Method {
            name: "setFresnelPower"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Method {
            name: "setSpecularAmount"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Method {
            name: "setSpecularRoughness"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Method {
            name: "setRoughnessMap"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setOpacityMap"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setBumpMap"
            Parameter { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setBumpAmount"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTranslucencyMap"
            Parameter { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTranslucentFalloff"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Method {
            name: "setDiffuseLightWrap"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Method {
            name: "setVertexColorsEnabled"
            Parameter { name: "vertexColorsEnabled"; type: "bool" }
        }
        Method {
            name: "setRoughnessChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setOpacityChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setTranslucencyChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setPointSize"
            Parameter { name: "size"; type: "float" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "width"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3ddirectionallight_p.h"
        name: "QQuick3DDirectionalLight"
        accessSemantics: "reference"
        prototype: "QQuick3DAbstractLight"
        exports: ["QtQuick3D/DirectionalLight 6.0"]
        exportMetaObjectRevisions: [1536]
    }
    Component {
        file: "private/qquick3deffect_p.h"
        name: "QQuick3DEffect"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Effect 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "passes"
            type: "QQuick3DShaderUtilsRenderPass"
            isList: true
            read: "passes"
            index: 0
            isReadonly: true
        }
        Method { name: "onPropertyDirty" }
        Method { name: "onTextureDirty" }
    }
    Component {
        file: "private/qquick3dinstancing_p.h"
        name: "QQuick3DFileInstancing"
        accessSemantics: "reference"
        prototype: "QQuick3DInstancing"
        exports: [
            "QtQuick3D/FileInstancing 6.2",
            "QtQuick3D/FileInstancing 6.3"
        ]
        exportMetaObjectRevisions: [1538, 1539]
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "instanceCount"
            type: "int"
            read: "instanceCount"
            notify: "instanceCountChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "instanceCountChanged" }
        Signal { name: "sourceChanged" }
    }
    Component {
        file: "private/qquick3dfrustumcamera_p.h"
        name: "QQuick3DFrustumCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DPerspectiveCamera"
        exports: ["QtQuick3D/FrustumCamera 6.0"]
        exportMetaObjectRevisions: [1536]
        Property { name: "top"; type: "float"; read: "top"; write: "setTop"; notify: "topChanged"; index: 0 }
        Property {
            name: "bottom"
            type: "float"
            read: "bottom"
            write: "setBottom"
            notify: "bottomChanged"
            index: 1
        }
        Property {
            name: "right"
            type: "float"
            read: "right"
            write: "setRight"
            notify: "rightChanged"
            index: 2
        }
        Property {
            name: "left"
            type: "float"
            read: "right"
            write: "setLeft"
            notify: "leftChanged"
            index: 3
        }
        Signal { name: "topChanged" }
        Signal { name: "bottomChanged" }
        Signal { name: "rightChanged" }
        Signal { name: "leftChanged" }
        Method {
            name: "setTop"
            Parameter { name: "top"; type: "float" }
        }
        Method {
            name: "setBottom"
            Parameter { name: "bottom"; type: "float" }
        }
        Method {
            name: "setRight"
            Parameter { name: "right"; type: "float" }
        }
        Method {
            name: "setLeft"
            Parameter { name: "left"; type: "float" }
        }
    }
    Component {
        file: "qquick3dgeometry.h"
        name: "QQuick3DGeometry"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Geometry 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Signal { name: "geometryNodeDirty" }
    }
    Component {
        file: "private/qquick3dinstancing_p.h"
        name: "QQuick3DInstanceList"
        accessSemantics: "reference"
        prototype: "QQuick3DInstancing"
        exports: ["QtQuick3D/InstanceList 6.2", "QtQuick3D/InstanceList 6.3"]
        exportMetaObjectRevisions: [1538, 1539]
        Property {
            name: "instances"
            type: "QQuick3DInstanceListEntry"
            isList: true
            read: "instances"
            index: 0
            isReadonly: true
        }
        Property {
            name: "instanceCount"
            type: "int"
            read: "instanceCount"
            notify: "instanceCountChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "instanceCountChanged" }
        Method { name: "handleInstanceChange" }
        Method {
            name: "onInstanceDestroyed"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dinstancing_p.h"
        name: "QQuick3DInstanceListEntry"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/InstanceListEntry 6.2"]
        exportMetaObjectRevisions: [1538]
        Property {
            name: "position"
            type: "QVector3D"
            read: "position"
            write: "setPosition"
            notify: "positionChanged"
            index: 0
        }
        Property {
            name: "scale"
            type: "QVector3D"
            read: "scale"
            write: "setScale"
            notify: "scaleChanged"
            index: 1
        }
        Property {
            name: "eulerRotation"
            type: "QVector3D"
            read: "eulerRotation"
            write: "setEulerRotation"
            notify: "eulerRotationChanged"
            index: 2
        }
        Property {
            name: "rotation"
            type: "QQuaternion"
            read: "rotation"
            write: "setRotation"
            notify: "rotationChanged"
            index: 3
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 4
        }
        Property {
            name: "customData"
            type: "QVector4D"
            read: "customData"
            write: "setCustomData"
            notify: "customDataChanged"
            index: 5
        }
        Signal { name: "positionChanged" }
        Signal { name: "scaleChanged" }
        Signal { name: "eulerRotationChanged" }
        Signal { name: "rotationChanged" }
        Signal { name: "colorChanged" }
        Signal { name: "customDataChanged" }
        Signal { name: "changed" }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Method {
            name: "setEulerRotation"
            Parameter { name: "eulerRotation"; type: "QVector3D" }
        }
        Method {
            name: "setRotation"
            Parameter { name: "rotation"; type: "QQuaternion" }
        }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setCustomData"
            Parameter { name: "customData"; type: "QVector4D" }
        }
    }
    Component {
        file: "qquick3dinstancing.h"
        name: "QQuick3DInstancing"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Instancing 6.2", "QtQuick3D/Instancing 6.3"]
        isCreatable: false
        exportMetaObjectRevisions: [1538, 1539]
        Property {
            name: "instanceCountOverride"
            type: "int"
            read: "instanceCountOverride"
            write: "setInstanceCountOverride"
            notify: "instanceCountOverrideChanged"
            index: 0
        }
        Property {
            name: "hasTransparency"
            type: "bool"
            read: "hasTransparency"
            write: "setHasTransparency"
            notify: "hasTransparencyChanged"
            index: 1
        }
        Property {
            name: "depthSortingEnabled"
            type: "bool"
            read: "depthSortingEnabled"
            write: "setDepthSortingEnabled"
            notify: "depthSortingEnabledChanged"
            index: 2
        }
        Signal { name: "instanceTableChanged" }
        Signal { name: "instanceNodeDirty" }
        Signal { name: "instanceCountOverrideChanged" }
        Signal { name: "hasTransparencyChanged" }
        Signal { name: "depthSortingEnabledChanged" }
        Method {
            name: "setInstanceCountOverride"
            Parameter { name: "instanceCountOverride"; type: "int" }
        }
        Method {
            name: "setHasTransparency"
            Parameter { name: "hasTransparency"; type: "bool" }
        }
        Method {
            name: "setDepthSortingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "instancePosition"
            revision: 1539
            type: "QVector3D"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "instanceScale"
            revision: 1539
            type: "QVector3D"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "instanceRotation"
            revision: 1539
            type: "QQuaternion"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "instanceColor"
            revision: 1539
            type: "QColor"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "instanceCustomData"
            revision: 1539
            type: "QVector4D"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquick3djoint_p.h"
        name: "QQuick3DJoint"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Joint 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "index"
            type: "int"
            read: "index"
            write: "setIndex"
            notify: "indexChanged"
            index: 0
        }
        Property {
            name: "skeletonRoot"
            type: "QQuick3DSkeleton"
            isPointer: true
            read: "skeletonRoot"
            write: "setSkeletonRoot"
            notify: "skeletonRootChanged"
            index: 1
        }
        Signal { name: "indexChanged" }
        Signal { name: "skeletonRootChanged" }
        Method {
            name: "setIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setSkeletonRoot"
            Parameter { name: "skeleton"; type: "QQuick3DSkeleton"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dloader_p.h"
        name: "QQuick3DLoader"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Loader3D 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property {
            name: "active"
            type: "bool"
            read: "active"
            write: "setActive"
            notify: "activeChanged"
            index: 0
        }
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 1
        }
        Property {
            name: "sourceComponent"
            type: "QQmlComponent"
            isPointer: true
            read: "sourceComponent"
            write: "setSourceComponent"
            notify: "sourceComponentChanged"
            index: 2
        }
        Property {
            name: "item"
            type: "QObject"
            isPointer: true
            read: "item"
            notify: "itemChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "status"
            type: "Status"
            read: "status"
            notify: "statusChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "progress"
            type: "double"
            read: "progress"
            notify: "progressChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "asynchronous"
            type: "bool"
            read: "asynchronous"
            write: "setAsynchronous"
            notify: "asynchronousChanged"
            index: 6
        }
        Signal { name: "itemChanged" }
        Signal { name: "activeChanged" }
        Signal { name: "sourceChanged" }
        Signal { name: "sourceComponentChanged" }
        Signal { name: "statusChanged" }
        Signal { name: "progressChanged" }
        Signal { name: "loaded" }
        Signal { name: "asynchronousChanged" }
        Method { name: "sourceLoaded" }
        Method { name: "setSource"; isJavaScriptFunction: true }
    }
    Component {
        file: "private/qquick3dmaterial_p.h"
        name: "QQuick3DMaterial"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Material 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "CullMode"
            values: ["BackFaceCulling", "FrontFaceCulling", "NoCulling"]
        }
        Enum {
            name: "TextureChannelMapping"
            values: ["R", "G", "B", "A"]
        }
        Enum {
            name: "DepthDrawMode"
            values: [
                "OpaqueOnlyDepthDraw",
                "AlwaysDepthDraw",
                "NeverDepthDraw",
                "OpaquePrePassDepthDraw"
            ]
        }
        Property {
            name: "lightProbe"
            type: "QQuick3DTexture"
            isPointer: true
            read: "lightProbe"
            write: "setLightProbe"
            notify: "lightProbeChanged"
            index: 0
        }
        Property {
            name: "cullMode"
            type: "CullMode"
            read: "cullMode"
            write: "setCullMode"
            notify: "cullModeChanged"
            index: 1
        }
        Property {
            name: "depthDrawMode"
            type: "DepthDrawMode"
            read: "depthDrawMode"
            write: "setDepthDrawMode"
            notify: "depthDrawModeChanged"
            index: 2
        }
        Signal {
            name: "lightProbeChanged"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "cullModeChanged"
            Parameter { name: "cullMode"; type: "QQuick3DMaterial::CullMode" }
        }
        Signal {
            name: "depthDrawModeChanged"
            Parameter { name: "depthDrawMode"; type: "QQuick3DMaterial::DepthDrawMode" }
        }
        Method {
            name: "setLightProbe"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setCullMode"
            Parameter { name: "cullMode"; type: "QQuick3DMaterial::CullMode" }
        }
        Method {
            name: "setDepthDrawMode"
            Parameter { name: "depthDrawMode"; type: "QQuick3DMaterial::DepthDrawMode" }
        }
    }
    Component {
        file: "private/qquick3dmodel_p.h"
        name: "QQuick3DModel"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Model 6.0", "QtQuick3D/Model 6.3"]
        exportMetaObjectRevisions: [1536, 1539]
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "castsShadows"
            type: "bool"
            read: "castsShadows"
            write: "setCastsShadows"
            notify: "castsShadowsChanged"
            index: 1
        }
        Property {
            name: "receivesShadows"
            type: "bool"
            read: "receivesShadows"
            write: "setReceivesShadows"
            notify: "receivesShadowsChanged"
            index: 2
        }
        Property {
            name: "materials"
            type: "QQuick3DMaterial"
            isList: true
            read: "materials"
            index: 3
            isReadonly: true
        }
        Property {
            name: "morphTargets"
            type: "QQuick3DMorphTarget"
            isList: true
            read: "morphTargets"
            notify: "morphTargetsChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "pickable"
            type: "bool"
            read: "pickable"
            write: "setPickable"
            notify: "pickableChanged"
            index: 5
        }
        Property {
            name: "geometry"
            type: "QQuick3DGeometry"
            isPointer: true
            read: "geometry"
            write: "setGeometry"
            notify: "geometryChanged"
            index: 6
        }
        Property {
            name: "instancing"
            type: "QQuick3DInstancing"
            isPointer: true
            read: "instancing"
            write: "setInstancing"
            notify: "instancingChanged"
            index: 7
        }
        Property {
            name: "instanceRoot"
            type: "QQuick3DNode"
            isPointer: true
            read: "instanceRoot"
            write: "setInstanceRoot"
            notify: "instanceRootChanged"
            index: 8
        }
        Property {
            name: "skeleton"
            type: "QQuick3DSkeleton"
            isPointer: true
            read: "skeleton"
            write: "setSkeleton"
            notify: "skeletonChanged"
            index: 9
        }
        Property {
            name: "inverseBindPoses"
            type: "QList<QMatrix4x4>"
            read: "inverseBindPoses"
            write: "setInverseBindPoses"
            notify: "inverseBindPosesChanged"
            index: 10
        }
        Property {
            name: "bounds"
            type: "QQuick3DBounds3"
            read: "bounds"
            notify: "boundsChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "depthBias"
            type: "float"
            read: "depthBias"
            write: "setDepthBias"
            notify: "depthBiasChanged"
            index: 12
        }
        Property {
            name: "receivesReflections"
            revision: 1539
            type: "bool"
            read: "receivesReflections"
            write: "setReceivesReflections"
            notify: "receivesReflectionsChanged"
            index: 13
        }
        Signal { name: "sourceChanged" }
        Signal { name: "castsShadowsChanged" }
        Signal { name: "receivesShadowsChanged" }
        Signal { name: "pickableChanged" }
        Signal { name: "geometryChanged" }
        Signal { name: "skeletonChanged" }
        Signal { name: "inverseBindPosesChanged" }
        Signal { name: "boundsChanged" }
        Signal { name: "instancingChanged" }
        Signal { name: "instanceRootChanged" }
        Signal { name: "morphTargetsChanged" }
        Signal { name: "depthBiasChanged" }
        Signal { name: "receivesReflectionsChanged"; revision: 1539 }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setCastsShadows"
            Parameter { name: "castsShadows"; type: "bool" }
        }
        Method {
            name: "setReceivesShadows"
            Parameter { name: "receivesShadows"; type: "bool" }
        }
        Method {
            name: "setPickable"
            Parameter { name: "pickable"; type: "bool" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "geometry"; type: "QQuick3DGeometry"; isPointer: true }
        }
        Method {
            name: "setSkeleton"
            Parameter { name: "skeleton"; type: "QQuick3DSkeleton"; isPointer: true }
        }
        Method {
            name: "setInverseBindPoses"
            Parameter { name: "poses"; type: "QList<QMatrix4x4>" }
        }
        Method {
            name: "setBounds"
            Parameter { name: "min"; type: "QVector3D" }
            Parameter { name: "max"; type: "QVector3D" }
        }
        Method {
            name: "setInstancing"
            Parameter { name: "instancing"; type: "QQuick3DInstancing"; isPointer: true }
        }
        Method {
            name: "setInstanceRoot"
            Parameter { name: "instanceRoot"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setDepthBias"
            Parameter { name: "bias"; type: "float" }
        }
        Method {
            name: "setReceivesReflections"
            revision: 1539
            Parameter { name: "receivesReflections"; type: "bool" }
        }
        Method {
            name: "onMaterialDestroyed"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "onMorphTargetDestroyed"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dmorphtarget_p.h"
        name: "QQuick3DMorphTarget"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/MorphTarget 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "MorphTargetAttribute"
            values: ["Position", "Normal", "Tangent", "Binormal"]
        }
        Property {
            name: "weight"
            type: "float"
            read: "weight"
            write: "setWeight"
            notify: "weightChanged"
            index: 0
        }
        Property {
            name: "attributes"
            type: "MorphTargetAttributes"
            read: "attributes"
            write: "setAttributes"
            notify: "attributesChanged"
            index: 1
        }
        Signal { name: "weightChanged" }
        Signal { name: "attributesChanged" }
        Method {
            name: "setWeight"
            Parameter { name: "castsShadows"; type: "float" }
        }
        Method {
            name: "setAttributes"
            Parameter { name: "attributes"; type: "QQuick3DMorphTarget::MorphTargetAttributes" }
        }
    }
    Component {
        file: "private/qquick3dnode_p.h"
        name: "QQuick3DNode"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Node 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "TransformSpace"
            values: ["LocalSpace", "ParentSpace", "SceneSpace"]
        }
        Enum {
            name: "StaticFlags"
            values: ["None"]
        }
        Property { name: "x"; type: "float"; read: "x"; write: "setX"; notify: "xChanged"; index: 0 }
        Property { name: "y"; type: "float"; read: "y"; write: "setY"; notify: "yChanged"; index: 1 }
        Property { name: "z"; type: "float"; read: "z"; write: "setZ"; notify: "zChanged"; index: 2 }
        Property {
            name: "rotation"
            type: "QQuaternion"
            read: "rotation"
            write: "setRotation"
            notify: "rotationChanged"
            index: 3
        }
        Property {
            name: "eulerRotation"
            type: "QVector3D"
            read: "eulerRotation"
            write: "setEulerRotation"
            notify: "eulerRotationChanged"
            index: 4
        }
        Property {
            name: "position"
            type: "QVector3D"
            read: "position"
            write: "setPosition"
            notify: "positionChanged"
            index: 5
        }
        Property {
            name: "scale"
            type: "QVector3D"
            read: "scale"
            write: "setScale"
            notify: "scaleChanged"
            index: 6
        }
        Property {
            name: "pivot"
            type: "QVector3D"
            read: "pivot"
            write: "setPivot"
            notify: "pivotChanged"
            index: 7
        }
        Property {
            name: "opacity"
            type: "float"
            read: "localOpacity"
            write: "setLocalOpacity"
            notify: "localOpacityChanged"
            index: 8
        }
        Property {
            name: "visible"
            type: "bool"
            read: "visible"
            write: "setVisible"
            notify: "visibleChanged"
            index: 9
        }
        Property {
            name: "forward"
            type: "QVector3D"
            read: "forward"
            notify: "forwardChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "up"
            type: "QVector3D"
            read: "up"
            notify: "upChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "right"
            type: "QVector3D"
            read: "right"
            notify: "rightChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "scenePosition"
            type: "QVector3D"
            read: "scenePosition"
            notify: "scenePositionChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "sceneRotation"
            type: "QQuaternion"
            read: "sceneRotation"
            notify: "sceneRotationChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "sceneScale"
            type: "QVector3D"
            read: "sceneScale"
            notify: "sceneScaleChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "sceneTransform"
            type: "QMatrix4x4"
            read: "sceneTransform"
            notify: "sceneTransformChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "staticFlags"
            type: "int"
            read: "staticFlags"
            write: "setStaticFlags"
            notify: "staticFlagsChanged"
            index: 17
        }
        Signal { name: "xChanged" }
        Signal { name: "yChanged" }
        Signal { name: "zChanged" }
        Signal { name: "rotationChanged" }
        Signal { name: "eulerRotationChanged" }
        Signal { name: "positionChanged" }
        Signal { name: "scaleChanged" }
        Signal { name: "pivotChanged" }
        Signal { name: "localOpacityChanged" }
        Signal { name: "visibleChanged" }
        Signal { name: "forwardChanged" }
        Signal { name: "upChanged" }
        Signal { name: "rightChanged" }
        Signal { name: "sceneTransformChanged" }
        Signal { name: "scenePositionChanged" }
        Signal { name: "sceneRotationChanged" }
        Signal { name: "sceneScaleChanged" }
        Signal { name: "staticFlagsChanged" }
        Method {
            name: "setX"
            Parameter { name: "x"; type: "float" }
        }
        Method {
            name: "setY"
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "setZ"
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "setRotation"
            Parameter { name: "rotation"; type: "QQuaternion" }
        }
        Method {
            name: "setEulerRotation"
            Parameter { name: "eulerRotation"; type: "QVector3D" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Method {
            name: "setPivot"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Method {
            name: "setLocalOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setStaticFlags"
            Parameter { name: "staticFlags"; type: "int" }
        }
        Method {
            name: "rotate"
            Parameter { name: "degrees"; type: "double" }
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "space"; type: "QQuick3DNode::TransformSpace" }
        }
        Method {
            name: "mapPositionToScene"
            type: "QVector3D"
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionFromScene"
            type: "QVector3D"
            Parameter { name: "scenePosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionToNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionFromNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionToScene"
            type: "QVector3D"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionFromScene"
            type: "QVector3D"
            Parameter { name: "sceneDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionToNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionFromNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "const QQuick3DNode"; isPointer: true }
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
    }
    Component {
        file: "qquick3dobject.h"
        name: "QQuick3DObject"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtQuick3D/Object3D 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Property {
            name: "parent"
            type: "QQuick3DObject"
            isPointer: true
            read: "parentItem"
            write: "setParentItem"
            notify: "parentChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "data"
            type: "QObject"
            isList: true
            read: "data"
            index: 1
            privateClass: "QQuick3DObjectPrivate"
            isReadonly: true
        }
        Property {
            name: "resources"
            type: "QObject"
            isList: true
            read: "resources"
            index: 2
            privateClass: "QQuick3DObjectPrivate"
            isReadonly: true
        }
        Property {
            name: "children"
            type: "QQuick3DObject"
            isList: true
            read: "children"
            notify: "childrenChanged"
            index: 3
            privateClass: "QQuick3DObjectPrivate"
            isReadonly: true
        }
        Property {
            name: "states"
            type: "QQuickState"
            isList: true
            read: "states"
            index: 4
            privateClass: "QQuick3DObjectPrivate"
            isReadonly: true
        }
        Property {
            name: "transitions"
            type: "QQuickTransition"
            isList: true
            read: "transitions"
            index: 5
            privateClass: "QQuick3DObjectPrivate"
            isReadonly: true
        }
        Property {
            name: "state"
            type: "QString"
            read: "state"
            write: "setState"
            notify: "stateChanged"
            index: 6
        }
        Signal { name: "parentChanged" }
        Signal { name: "childrenChanged" }
        Signal { name: "stateChanged" }
        Method { name: "update" }
        Method {
            name: "setParentItem"
            Parameter { name: "parentItem"; type: "QQuick3DObject"; isPointer: true }
        }
        Method {
            name: "_q_resourceObjectDeleted"
            Parameter { type: "QObject"; isPointer: true }
        }
        Method {
            name: "_q_createJSWrapper"
            type: "qulonglong"
            Parameter { type: "QV4::ExecutionEngine"; isPointer: true }
        }
        Method { name: "_q_cleanupContentItem2D" }
    }
    Component {
        file: "private/qquick3dorthographiccamera_p.h"
        name: "QQuick3DOrthographicCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DCamera"
        exports: ["QtQuick3D/OrthographicCamera 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "clipNear"
            type: "float"
            read: "clipNear"
            write: "setClipNear"
            notify: "clipNearChanged"
            index: 0
        }
        Property {
            name: "clipFar"
            type: "float"
            read: "clipFar"
            write: "setClipFar"
            notify: "clipFarChanged"
            index: 1
        }
        Property {
            name: "horizontalMagnification"
            type: "float"
            read: "horizontalMagnification"
            write: "setHorizontalMagnification"
            notify: "horizontalMagnificationChanged"
            index: 2
        }
        Property {
            name: "verticalMagnification"
            type: "float"
            read: "verticalMagnification"
            write: "setVerticalMagnification"
            notify: "verticalMagnificationChanged"
            index: 3
        }
        Signal { name: "clipNearChanged" }
        Signal { name: "clipFarChanged" }
        Signal { name: "horizontalMagnificationChanged" }
        Signal { name: "verticalMagnificationChanged" }
        Method {
            name: "setClipNear"
            Parameter { name: "clipNear"; type: "float" }
        }
        Method {
            name: "setClipFar"
            Parameter { name: "clipFar"; type: "float" }
        }
        Method {
            name: "setHorizontalMagnification"
            Parameter { name: "horizontalMagnification"; type: "float" }
        }
        Method {
            name: "setVerticalMagnification"
            Parameter { name: "horizontalMagnification"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dperspectivecamera_p.h"
        name: "QQuick3DPerspectiveCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DCamera"
        exports: ["QtQuick3D/PerspectiveCamera 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "FieldOfViewOrientation"
            values: ["Vertical", "Horizontal"]
        }
        Property {
            name: "clipNear"
            type: "float"
            read: "clipNear"
            write: "setClipNear"
            notify: "clipNearChanged"
            index: 0
        }
        Property {
            name: "clipFar"
            type: "float"
            read: "clipFar"
            write: "setClipFar"
            notify: "clipFarChanged"
            index: 1
        }
        Property {
            name: "fieldOfView"
            type: "float"
            read: "fieldOfView"
            write: "setFieldOfView"
            notify: "fieldOfViewChanged"
            index: 2
        }
        Property {
            name: "fieldOfViewOrientation"
            type: "FieldOfViewOrientation"
            read: "fieldOfViewOrientation"
            write: "setFieldOfViewOrientation"
            notify: "fieldOfViewOrientationChanged"
            index: 3
        }
        Signal { name: "clipNearChanged" }
        Signal { name: "clipFarChanged" }
        Signal { name: "fieldOfViewChanged" }
        Signal { name: "fieldOfViewOrientationChanged" }
        Method {
            name: "setClipNear"
            Parameter { name: "clipNear"; type: "float" }
        }
        Method {
            name: "setClipFar"
            Parameter { name: "clipFar"; type: "float" }
        }
        Method {
            name: "setFieldOfView"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Method {
            name: "setFieldOfViewOrientation"
            Parameter {
                name: "fieldOfViewOrientation"
                type: "QQuick3DPerspectiveCamera::FieldOfViewOrientation"
            }
        }
    }
    Component {
        file: "private/qquick3dpointlight_p.h"
        name: "QQuick3DPointLight"
        accessSemantics: "reference"
        prototype: "QQuick3DAbstractLight"
        exports: ["QtQuick3D/PointLight 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "constantFade"
            type: "float"
            read: "constantFade"
            write: "setConstantFade"
            notify: "constantFadeChanged"
            index: 0
        }
        Property {
            name: "linearFade"
            type: "float"
            read: "linearFade"
            write: "setLinearFade"
            notify: "linearFadeChanged"
            index: 1
        }
        Property {
            name: "quadraticFade"
            type: "float"
            read: "quadraticFade"
            write: "setQuadraticFade"
            notify: "quadraticFadeChanged"
            index: 2
        }
        Signal { name: "constantFadeChanged" }
        Signal { name: "linearFadeChanged" }
        Signal { name: "quadraticFadeChanged" }
        Method {
            name: "setConstantFade"
            Parameter { name: "constantFade"; type: "float" }
        }
        Method {
            name: "setLinearFade"
            Parameter { name: "linearFade"; type: "float" }
        }
        Method {
            name: "setQuadraticFade"
            Parameter { name: "quadraticFade"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dprincipledmaterial_p.h"
        name: "QQuick3DPrincipledMaterial"
        accessSemantics: "reference"
        prototype: "QQuick3DMaterial"
        exports: [
            "QtQuick3D/PrincipledMaterial 6.0",
            "QtQuick3D/PrincipledMaterial 6.2",
            "QtQuick3D/PrincipledMaterial 6.3"
        ]
        exportMetaObjectRevisions: [1536, 1538, 1539]
        Enum {
            name: "Lighting"
            values: ["NoLighting", "FragmentLighting"]
        }
        Enum {
            name: "BlendMode"
            values: ["SourceOver", "Screen", "Multiply"]
        }
        Enum {
            name: "AlphaMode"
            values: ["Default", "Mask", "Blend", "Opaque"]
        }
        Property {
            name: "lighting"
            type: "Lighting"
            read: "lighting"
            write: "setLighting"
            notify: "lightingChanged"
            index: 0
        }
        Property {
            name: "blendMode"
            type: "BlendMode"
            read: "blendMode"
            write: "setBlendMode"
            notify: "blendModeChanged"
            index: 1
        }
        Property {
            name: "baseColor"
            type: "QColor"
            read: "baseColor"
            write: "setBaseColor"
            notify: "baseColorChanged"
            index: 2
        }
        Property {
            name: "baseColorMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "baseColorMap"
            write: "setBaseColorMap"
            notify: "baseColorMapChanged"
            index: 3
        }
        Property {
            name: "metalness"
            type: "float"
            read: "metalness"
            write: "setMetalness"
            notify: "metalnessChanged"
            index: 4
        }
        Property {
            name: "metalnessMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "metalnessMap"
            write: "setMetalnessMap"
            notify: "metalnessMapChanged"
            index: 5
        }
        Property {
            name: "metalnessChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "metalnessChannel"
            write: "setMetalnessChannel"
            notify: "metalnessChannelChanged"
            index: 6
        }
        Property {
            name: "specularAmount"
            type: "float"
            read: "specularAmount"
            write: "setSpecularAmount"
            notify: "specularAmountChanged"
            index: 7
        }
        Property {
            name: "specularMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "specularMap"
            write: "setSpecularMap"
            notify: "specularMapChanged"
            index: 8
        }
        Property {
            name: "specularTint"
            type: "float"
            read: "specularTint"
            write: "setSpecularTint"
            notify: "specularTintChanged"
            index: 9
        }
        Property {
            name: "roughness"
            type: "float"
            read: "roughness"
            write: "setRoughness"
            notify: "roughnessChanged"
            index: 10
        }
        Property {
            name: "roughnessMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "roughnessMap"
            write: "setRoughnessMap"
            notify: "roughnessMapChanged"
            index: 11
        }
        Property {
            name: "roughnessChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "roughnessChannel"
            write: "setRoughnessChannel"
            notify: "roughnessChannelChanged"
            index: 12
        }
        Property {
            name: "emissiveFactor"
            type: "QVector3D"
            read: "emissiveFactor"
            write: "setEmissiveFactor"
            notify: "emissiveFactorChanged"
            index: 13
        }
        Property {
            name: "emissiveMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "emissiveMap"
            write: "setEmissiveMap"
            notify: "emissiveMapChanged"
            index: 14
        }
        Property {
            name: "opacity"
            type: "float"
            read: "opacity"
            write: "setOpacity"
            notify: "opacityChanged"
            index: 15
        }
        Property {
            name: "opacityMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "opacityMap"
            write: "setOpacityMap"
            notify: "opacityMapChanged"
            index: 16
        }
        Property {
            name: "opacityChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "opacityChannel"
            write: "setOpacityChannel"
            notify: "opacityChannelChanged"
            index: 17
        }
        Property {
            name: "normalMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "normalMap"
            write: "setNormalMap"
            notify: "normalMapChanged"
            index: 18
        }
        Property {
            name: "normalStrength"
            type: "float"
            read: "normalStrength"
            write: "setNormalStrength"
            notify: "normalStrengthChanged"
            index: 19
        }
        Property {
            name: "specularReflectionMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "specularReflectionMap"
            write: "setSpecularReflectionMap"
            notify: "specularReflectionMapChanged"
            index: 20
        }
        Property {
            name: "occlusionMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "occlusionMap"
            write: "setOcclusionMap"
            notify: "occlusionMapChanged"
            index: 21
        }
        Property {
            name: "occlusionChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "occlusionChannel"
            write: "setOcclusionChannel"
            notify: "occlusionChannelChanged"
            index: 22
        }
        Property {
            name: "occlusionAmount"
            type: "float"
            read: "occlusionAmount"
            write: "setOcclusionAmount"
            notify: "occlusionAmountChanged"
            index: 23
        }
        Property {
            name: "alphaMode"
            type: "AlphaMode"
            read: "alphaMode"
            write: "setAlphaMode"
            notify: "alphaModeChanged"
            index: 24
        }
        Property {
            name: "alphaCutoff"
            type: "float"
            read: "alphaCutoff"
            write: "setAlphaCutoff"
            notify: "alphaCutoffChanged"
            index: 25
        }
        Property {
            name: "pointSize"
            type: "float"
            read: "pointSize"
            write: "setPointSize"
            notify: "pointSizeChanged"
            index: 26
        }
        Property {
            name: "lineWidth"
            type: "float"
            read: "lineWidth"
            write: "setLineWidth"
            notify: "lineWidthChanged"
            index: 27
        }
        Property {
            name: "heightMap"
            revision: 1538
            type: "QQuick3DTexture"
            isPointer: true
            read: "heightMap"
            write: "setHeightMap"
            notify: "heightMapChanged"
            index: 28
        }
        Property {
            name: "heightChannel"
            revision: 1538
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "heightChannel"
            write: "setHeightChannel"
            notify: "heightChannelChanged"
            index: 29
        }
        Property {
            name: "heightAmount"
            revision: 1538
            type: "float"
            read: "heightAmount"
            write: "setHeightAmount"
            notify: "heightAmountChanged"
            index: 30
        }
        Property {
            name: "minHeightMapSamples"
            revision: 1538
            type: "int"
            read: "minHeightMapSamples"
            write: "setMinHeightMapSamples"
            notify: "minHeightMapSamplesChanged"
            index: 31
        }
        Property {
            name: "maxHeightMapSamples"
            revision: 1538
            type: "int"
            read: "maxHeightMapSamples"
            write: "setMaxHeightMapSamples"
            notify: "maxHeightMapSamplesChanged"
            index: 32
        }
        Property {
            name: "clearcoatAmount"
            revision: 1539
            type: "float"
            read: "clearcoatAmount"
            write: "setClearcoatAmount"
            notify: "clearcoatAmountChanged"
            index: 33
        }
        Property {
            name: "clearcoatMap"
            revision: 1539
            type: "QQuick3DTexture"
            isPointer: true
            read: "clearcoatMap"
            write: "setClearcoatMap"
            notify: "clearcoatMapChanged"
            index: 34
        }
        Property {
            name: "clearcoatChannel"
            revision: 1539
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "clearcoatChannel"
            write: "setClearcoatChannel"
            notify: "clearcoatChannelChanged"
            index: 35
        }
        Property {
            name: "clearcoatRoughnessAmount"
            revision: 1539
            type: "float"
            read: "clearcoatRoughnessAmount"
            write: "setClearcoatRoughnessAmount"
            notify: "clearcoatRoughnessAmountChanged"
            index: 36
        }
        Property {
            name: "clearcoatRoughnessChannel"
            revision: 1539
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "clearcoatRoughnessChannel"
            write: "setClearcoatRoughnessChannel"
            notify: "clearcoatRoughnessChannelChanged"
            index: 37
        }
        Property {
            name: "clearcoatRoughnessMap"
            revision: 1539
            type: "QQuick3DTexture"
            isPointer: true
            read: "clearcoatRoughnessMap"
            write: "setClearcoatRoughnessMap"
            notify: "clearcoatRoughnessMapChanged"
            index: 38
        }
        Property {
            name: "clearcoatNormalMap"
            revision: 1539
            type: "QQuick3DTexture"
            isPointer: true
            read: "clearcoatNormalMap"
            write: "setClearcoatNormalMap"
            notify: "clearcoatNormalMapChanged"
            index: 39
        }
        Property {
            name: "transmissionFactor"
            type: "float"
            read: "transmissionFactor"
            write: "setTransmissionFactor"
            notify: "transmissionFactorChanged"
            index: 40
        }
        Property {
            name: "transmissionMap"
            type: "QQuick3DTexture"
            isPointer: true
            read: "transmissionMap"
            write: "setTransmissionMap"
            notify: "transmissionMapChanged"
            index: 41
        }
        Property {
            name: "transmissionChannel"
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "transmissionChannel"
            write: "setTransmissionChannel"
            notify: "transmissionChannelChanged"
            index: 42
        }
        Property {
            name: "thicknessFactor"
            revision: 1539
            type: "float"
            read: "thicknessFactor"
            write: "setThicknessFactor"
            notify: "thicknessFactorChanged"
            index: 43
        }
        Property {
            name: "thicknessMap"
            revision: 1539
            type: "QQuick3DTexture"
            isPointer: true
            read: "thicknessMap"
            write: "setThicknessMap"
            notify: "thicknessMapChanged"
            index: 44
        }
        Property {
            name: "thicknessChannel"
            revision: 1539
            type: "QQuick3DMaterial::TextureChannelMapping"
            read: "thicknessChannel"
            write: "setThicknessChannel"
            notify: "thicknessChannelChanged"
            index: 45
        }
        Property {
            name: "attenuationDistance"
            revision: 1539
            type: "float"
            read: "attenuationDistance"
            write: "setAttenuationDistance"
            notify: "attenuationDistanceChanged"
            index: 46
        }
        Property {
            name: "attenuationColor"
            revision: 1539
            type: "QColor"
            read: "attenuationColor"
            write: "setAttenuationColor"
            notify: "attenuationColorChanged"
            index: 47
        }
        Property {
            name: "indexOfRefraction"
            revision: 1539
            type: "float"
            read: "indexOfRefraction"
            write: "setIndexOfRefraction"
            notify: "indexOfRefractionChanged"
            index: 48
        }
        Signal {
            name: "lightingChanged"
            Parameter { name: "lighting"; type: "QQuick3DPrincipledMaterial::Lighting" }
        }
        Signal {
            name: "blendModeChanged"
            Parameter { name: "blendMode"; type: "QQuick3DPrincipledMaterial::BlendMode" }
        }
        Signal {
            name: "baseColorChanged"
            Parameter { name: "baseColor"; type: "QColor" }
        }
        Signal {
            name: "baseColorMapChanged"
            Parameter { name: "baseColorMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveFactorChanged"
            Parameter { name: "emissiveFactor"; type: "QVector3D" }
        }
        Signal {
            name: "specularReflectionMapChanged"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularMapChanged"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularTintChanged"
            Parameter { name: "specularTint"; type: "float" }
        }
        Signal {
            name: "specularAmountChanged"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Signal {
            name: "roughnessChanged"
            Parameter { name: "roughness"; type: "float" }
        }
        Signal {
            name: "roughnessMapChanged"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityMapChanged"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "metalnessChanged"
            Parameter { name: "metalness"; type: "float" }
        }
        Signal {
            name: "metalnessMapChanged"
            Parameter { name: "metalnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "normalStrengthChanged"
            Parameter { name: "normalStrength"; type: "float" }
        }
        Signal {
            name: "occlusionMapChanged"
            Parameter { name: "occlusionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "occlusionAmountChanged"
            Parameter { name: "occlusionAmount"; type: "float" }
        }
        Signal {
            name: "alphaModeChanged"
            Parameter { name: "alphaMode"; type: "QQuick3DPrincipledMaterial::AlphaMode" }
        }
        Signal {
            name: "alphaCutoffChanged"
            Parameter { name: "alphaCutoff"; type: "float" }
        }
        Signal {
            name: "metalnessChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "roughnessChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "opacityChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "occlusionChannelChanged"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal { name: "pointSizeChanged" }
        Signal { name: "lineWidthChanged" }
        Signal {
            name: "heightMapChanged"
            revision: 1538
            Parameter { name: "heightMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "heightChannelChanged"
            revision: 1538
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "heightAmountChanged"
            revision: 1538
            Parameter { name: "heightAmount"; type: "float" }
        }
        Signal {
            name: "minHeightMapSamplesChanged"
            revision: 1538
            Parameter { name: "samples"; type: "int" }
        }
        Signal {
            name: "maxHeightMapSamplesChanged"
            revision: 1538
            Parameter { name: "samples"; type: "int" }
        }
        Signal {
            name: "clearcoatAmountChanged"
            revision: 1539
            Parameter { name: "amount"; type: "float" }
        }
        Signal {
            name: "clearcoatMapChanged"
            revision: 1539
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "clearcoatChannelChanged"
            revision: 1539
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "clearcoatRoughnessAmountChanged"
            revision: 1539
            Parameter { name: "amount"; type: "float" }
        }
        Signal {
            name: "clearcoatRoughnessChannelChanged"
            revision: 1539
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "clearcoatRoughnessMapChanged"
            revision: 1539
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "clearcoatNormalMapChanged"
            revision: 1539
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "transmissionFactorChanged"
            revision: 1539
            Parameter { name: "amount"; type: "float" }
        }
        Signal {
            name: "transmissionMapChanged"
            revision: 1539
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "transmissionChannelChanged"
            revision: 1539
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "thicknessFactorChanged"
            revision: 1539
            Parameter { name: "amount"; type: "float" }
        }
        Signal {
            name: "thicknessMapChanged"
            revision: 1539
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "thicknessChannelChanged"
            revision: 1539
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Signal {
            name: "attenuationDistanceChanged"
            revision: 1539
            Parameter { name: "distance"; type: "float" }
        }
        Signal {
            name: "attenuationColorChanged"
            revision: 1539
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "indexOfRefractionChanged"
            revision: 1539
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Method {
            name: "setLighting"
            Parameter { name: "lighting"; type: "QQuick3DPrincipledMaterial::Lighting" }
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "QQuick3DPrincipledMaterial::BlendMode" }
        }
        Method {
            name: "setBaseColor"
            Parameter { name: "baseColor"; type: "QColor" }
        }
        Method {
            name: "setBaseColorMap"
            Parameter { name: "baseColorMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveFactor"
            Parameter { name: "emissiveFactor"; type: "QVector3D" }
        }
        Method {
            name: "setSpecularReflectionMap"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularMap"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularTint"
            Parameter { name: "specularTint"; type: "float" }
        }
        Method {
            name: "setSpecularAmount"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Method {
            name: "setRoughness"
            Parameter { name: "roughness"; type: "float" }
        }
        Method {
            name: "setRoughnessMap"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setOpacityMap"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setMetalness"
            Parameter { name: "metalnessAmount"; type: "float" }
        }
        Method {
            name: "setMetalnessMap"
            Parameter { name: "metalnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setNormalStrength"
            Parameter { name: "normalStrength"; type: "float" }
        }
        Method {
            name: "setOcclusionMap"
            Parameter { name: "occlusionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOcclusionAmount"
            Parameter { name: "occlusionAmount"; type: "float" }
        }
        Method {
            name: "setAlphaMode"
            Parameter { name: "alphaMode"; type: "QQuick3DPrincipledMaterial::AlphaMode" }
        }
        Method {
            name: "setAlphaCutoff"
            Parameter { name: "alphaCutoff"; type: "float" }
        }
        Method {
            name: "setMetalnessChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setRoughnessChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setOpacityChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setOcclusionChannel"
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setPointSize"
            Parameter { name: "size"; type: "float" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "width"; type: "float" }
        }
        Method {
            name: "setHeightMap"
            revision: 1538
            Parameter { name: "heightMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setHeightChannel"
            revision: 1538
            Parameter { name: "channel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setHeightAmount"
            revision: 1538
            Parameter { name: "heightAmount"; type: "float" }
        }
        Method {
            name: "setMinHeightMapSamples"
            revision: 1538
            Parameter { name: "samples"; type: "int" }
        }
        Method {
            name: "setMaxHeightMapSamples"
            revision: 1538
            Parameter { name: "samples"; type: "int" }
        }
        Method {
            name: "setClearcoatAmount"
            revision: 1539
            Parameter { name: "newClearcoatAmount"; type: "float" }
        }
        Method {
            name: "setClearcoatMap"
            revision: 1539
            Parameter { name: "newClearcoatMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setClearcoatChannel"
            revision: 1539
            Parameter { name: "newClearcoatChannel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setClearcoatRoughnessAmount"
            revision: 1539
            Parameter { name: "newClearcoatRoughnessAmount"; type: "float" }
        }
        Method {
            name: "setClearcoatRoughnessChannel"
            revision: 1539
            Parameter {
                name: "newClearcoatRoughnessChannel"
                type: "QQuick3DMaterial::TextureChannelMapping"
            }
        }
        Method {
            name: "setClearcoatRoughnessMap"
            revision: 1539
            Parameter { name: "newClearcoatRoughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setClearcoatNormalMap"
            revision: 1539
            Parameter { name: "newClearcoatNormalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTransmissionFactor"
            revision: 1539
            Parameter { name: "newTransmissionFactor"; type: "float" }
        }
        Method {
            name: "setTransmissionMap"
            revision: 1539
            Parameter { name: "newTransmissionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTransmissionChannel"
            revision: 1539
            Parameter { name: "newTransmissionChannel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setThicknessFactor"
            revision: 1539
            Parameter { name: "newThicknessFactor"; type: "float" }
        }
        Method {
            name: "setThicknessMap"
            revision: 1539
            Parameter { name: "newThicknessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setThicknessChannel"
            revision: 1539
            Parameter { name: "newThicknessChannel"; type: "QQuick3DMaterial::TextureChannelMapping" }
        }
        Method {
            name: "setAttenuationDistance"
            revision: 1539
            Parameter { name: "newAttenuationDistance"; type: "float" }
        }
        Method {
            name: "setAttenuationColor"
            revision: 1539
            Parameter { name: "newAttenuationColor"; type: "QColor" }
        }
        Method {
            name: "setIndexOfRefraction"
            revision: 1539
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dquaternionanimation_p.h"
        name: "QQuick3DQuaternionAnimation"
        accessSemantics: "reference"
        prototype: "QQuickPropertyAnimation"
        exports: ["QtQuick3D/QuaternionAnimation 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Type"
            values: ["Slerp", "Nlerp"]
        }
        Property { name: "from"; type: "QQuaternion"; read: "from"; write: "setFrom"; index: 0 }
        Property { name: "to"; type: "QQuaternion"; read: "to"; write: "setTo"; index: 1 }
        Property {
            name: "type"
            type: "Type"
            read: "type"
            write: "setType"
            notify: "typeChanged"
            index: 2
        }
        Property {
            name: "fromXRotation"
            type: "float"
            read: "fromXRotation"
            write: "setFromXRotation"
            notify: "fromXRotationChanged"
            index: 3
        }
        Property {
            name: "fromYRotation"
            type: "float"
            read: "fromYRotation"
            write: "setFromYRotation"
            notify: "fromYRotationChanged"
            index: 4
        }
        Property {
            name: "fromZRotation"
            type: "float"
            read: "fromZRotation"
            write: "setFromZRotation"
            notify: "fromZRotationChanged"
            index: 5
        }
        Property {
            name: "toXRotation"
            type: "float"
            read: "toXRotation"
            write: "setToXRotation"
            notify: "toXRotationChanged"
            index: 6
        }
        Property {
            name: "toYRotation"
            type: "float"
            read: "toYRotation"
            write: "setToYRotation"
            notify: "toYRotationChanged"
            index: 7
        }
        Property {
            name: "toZRotation"
            type: "float"
            read: "toZRotation"
            write: "setToZRotation"
            notify: "toZRotationChanged"
            index: 8
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "QQuick3DQuaternionAnimation::Type" }
        }
        Signal {
            name: "fromXRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "fromYRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "fromZRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "toXRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "toYRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "toZRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dquaternionutils_p.h"
        name: "QQuick3DQuaternionUtils"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Quaternion 6.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [1536]
        Method {
            name: "fromAxesAndAngles"
            type: "QQuaternion"
            Parameter { name: "axis1"; type: "QVector3D" }
            Parameter { name: "angle1"; type: "float" }
            Parameter { name: "axis2"; type: "QVector3D" }
            Parameter { name: "angle2"; type: "float" }
            Parameter { name: "axis3"; type: "QVector3D" }
            Parameter { name: "angle3"; type: "float" }
        }
        Method {
            name: "fromAxesAndAngles"
            type: "QQuaternion"
            Parameter { name: "axis1"; type: "QVector3D" }
            Parameter { name: "angle1"; type: "float" }
            Parameter { name: "axis2"; type: "QVector3D" }
            Parameter { name: "angle2"; type: "float" }
        }
        Method {
            name: "fromAxisAndAngle"
            type: "QQuaternion"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "z"; type: "float" }
            Parameter { name: "angle"; type: "float" }
        }
        Method {
            name: "fromAxisAndAngle"
            type: "QQuaternion"
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "angle"; type: "float" }
        }
        Method {
            name: "fromEulerAngles"
            type: "QQuaternion"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "fromEulerAngles"
            type: "QQuaternion"
            Parameter { name: "eulerAngles"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            type: "QQuaternion"
            Parameter { name: "sourcePosition"; type: "QVector3D" }
            Parameter { name: "targetPosition"; type: "QVector3D" }
            Parameter { name: "forwardDirection"; type: "QVector3D" }
            Parameter { name: "upDirection"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            type: "QQuaternion"
            Parameter { name: "sourcePosition"; type: "QVector3D" }
            Parameter { name: "targetPosition"; type: "QVector3D" }
            Parameter { name: "forwardDirection"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            type: "QQuaternion"
            Parameter { name: "sourcePosition"; type: "QVector3D" }
            Parameter { name: "targetPosition"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3dreflectionprobe_p.h"
        name: "QQuick3DReflectionProbe"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/ReflectionProbe 6.3"]
        exportMetaObjectRevisions: [1539]
        Enum {
            name: "ReflectionQuality"
            values: ["VeryLow", "Low", "Medium", "High", "VeryHigh"]
        }
        Enum {
            name: "ReflectionRefreshMode"
            values: ["FirstFrame", "EveryFrame"]
        }
        Enum {
            name: "ReflectionTimeSlicing"
            values: ["None", "AllFacesAtOnce", "IndividualFaces"]
        }
        Property {
            name: "quality"
            type: "ReflectionQuality"
            read: "quality"
            write: "setQuality"
            notify: "qualityChanged"
            index: 0
        }
        Property {
            name: "clearColor"
            type: "QColor"
            read: "clearColor"
            write: "setClearColor"
            notify: "clearColorChanged"
            index: 1
        }
        Property {
            name: "refreshMode"
            type: "ReflectionRefreshMode"
            read: "refreshMode"
            write: "setRefreshMode"
            notify: "refreshModeChanged"
            index: 2
        }
        Property {
            name: "timeSlicing"
            type: "ReflectionTimeSlicing"
            read: "timeSlicing"
            write: "setTimeSlicing"
            notify: "timeSlicingChanged"
            index: 3
        }
        Property {
            name: "parallaxCorrection"
            type: "bool"
            read: "parallaxCorrection"
            write: "setParallaxCorrection"
            notify: "parallaxCorrectionChanged"
            index: 4
        }
        Property {
            name: "boxSize"
            type: "QVector3D"
            read: "boxSize"
            write: "setBoxSize"
            notify: "boxSizeChanged"
            index: 5
        }
        Signal { name: "qualityChanged" }
        Signal { name: "clearColorChanged" }
        Signal { name: "refreshModeChanged" }
        Signal { name: "timeSlicingChanged" }
        Signal { name: "parallaxCorrectionChanged" }
        Signal { name: "boxSizeChanged" }
        Method {
            name: "setQuality"
            Parameter { name: "reflectionQuality"; type: "ReflectionQuality" }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Method {
            name: "setRefreshMode"
            Parameter { name: "newRefreshMode"; type: "ReflectionRefreshMode" }
        }
        Method {
            name: "setTimeSlicing"
            Parameter { name: "newTimeSlicing"; type: "ReflectionTimeSlicing" }
        }
        Method {
            name: "setParallaxCorrection"
            Parameter { name: "parallaxCorrection"; type: "bool" }
        }
        Method {
            name: "setBoxSize"
            Parameter { name: "newBoxSize"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3drepeater_p.h"
        name: "QQuick3DRepeater"
        accessSemantics: "reference"
        defaultProperty: "delegate"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Repeater3D 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "model"
            type: "QVariant"
            read: "model"
            write: "setModel"
            notify: "modelChanged"
            index: 0
        }
        Property {
            name: "delegate"
            type: "QQmlComponent"
            isPointer: true
            read: "delegate"
            write: "setDelegate"
            notify: "delegateChanged"
            index: 1
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "modelChanged" }
        Signal { name: "delegateChanged" }
        Signal { name: "countChanged" }
        Signal {
            name: "objectAdded"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "object"; type: "QQuick3DObject"; isPointer: true }
        }
        Signal {
            name: "objectRemoved"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "object"; type: "QQuick3DObject"; isPointer: true }
        }
        Method {
            name: "createdObject"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "initObject"
            Parameter { type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "modelUpdated"
            Parameter { name: "changeSet"; type: "QQmlChangeSet" }
            Parameter { name: "reset"; type: "bool" }
        }
        Method {
            name: "objectAt"
            type: "QQuick3DObject"
            isPointer: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquick3dresourceloader_p.h"
        name: "QQuick3DResourceLoader"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/ResourceLoader 6.3"]
        exportMetaObjectRevisions: [1539]
        Property {
            name: "meshSources"
            type: "QList<QUrl>"
            read: "meshSources"
            write: "setMeshSources"
            notify: "meshSourcesChanged"
            index: 0
        }
        Property {
            name: "textures"
            type: "QQuick3DTexture"
            isList: true
            read: "textures"
            index: 1
            isReadonly: true
        }
        Property {
            name: "geometries"
            type: "QQuick3DGeometry"
            isList: true
            read: "geometries"
            index: 2
            isReadonly: true
        }
        Signal { name: "meshSourcesChanged" }
        Method {
            name: "onGeometryDestroyed"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "onTextureDestroyed"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dsceneenvironment_p.h"
        name: "QQuick3DSceneEnvironment"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/SceneEnvironment 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "QQuick3DEnvironmentAAModeValues"
            values: ["NoAA", "SSAA", "MSAA", "ProgressiveAA"]
        }
        Enum {
            name: "QQuick3DEnvironmentAAQualityValues"
            values: ["Medium", "High", "VeryHigh"]
        }
        Enum {
            name: "QQuick3DEnvironmentBackgroundTypes"
            values: ["Transparent", "Unspecified", "Color", "SkyBox"]
        }
        Enum {
            name: "QQuick3DEnvironmentTonemapModes"
            values: [
                "TonemapModeNone",
                "TonemapModeLinear",
                "TonemapModeAces",
                "TonemapModeHejlDawson",
                "TonemapModeFilmic"
            ]
        }
        Property {
            name: "antialiasingMode"
            type: "QQuick3DEnvironmentAAModeValues"
            read: "antialiasingMode"
            write: "setAntialiasingMode"
            notify: "antialiasingModeChanged"
            index: 0
        }
        Property {
            name: "antialiasingQuality"
            type: "QQuick3DEnvironmentAAQualityValues"
            read: "antialiasingQuality"
            write: "setAntialiasingQuality"
            notify: "antialiasingQualityChanged"
            index: 1
        }
        Property {
            name: "temporalAAEnabled"
            type: "bool"
            read: "temporalAAEnabled"
            write: "setTemporalAAEnabled"
            notify: "temporalAAEnabledChanged"
            index: 2
        }
        Property {
            name: "temporalAAStrength"
            type: "float"
            read: "temporalAAStrength"
            write: "setTemporalAAStrength"
            notify: "temporalAAStrengthChanged"
            index: 3
        }
        Property {
            name: "backgroundMode"
            type: "QQuick3DEnvironmentBackgroundTypes"
            read: "backgroundMode"
            write: "setBackgroundMode"
            notify: "backgroundModeChanged"
            index: 4
        }
        Property {
            name: "clearColor"
            type: "QColor"
            read: "clearColor"
            write: "setClearColor"
            notify: "clearColorChanged"
            index: 5
        }
        Property {
            name: "depthTestEnabled"
            type: "bool"
            read: "depthTestEnabled"
            write: "setDepthTestEnabled"
            notify: "depthTestEnabledChanged"
            index: 6
        }
        Property {
            name: "depthPrePassEnabled"
            type: "bool"
            read: "depthPrePassEnabled"
            write: "setDepthPrePassEnabled"
            notify: "depthPrePassEnabledChanged"
            index: 7
        }
        Property {
            name: "aoStrength"
            type: "float"
            read: "aoStrength"
            write: "setAoStrength"
            notify: "aoStrengthChanged"
            index: 8
        }
        Property {
            name: "aoDistance"
            type: "float"
            read: "aoDistance"
            write: "setAoDistance"
            notify: "aoDistanceChanged"
            index: 9
        }
        Property {
            name: "aoSoftness"
            type: "float"
            read: "aoSoftness"
            write: "setAoSoftness"
            notify: "aoSoftnessChanged"
            index: 10
        }
        Property {
            name: "aoDither"
            type: "bool"
            read: "aoDither"
            write: "setAoDither"
            notify: "aoDitherChanged"
            index: 11
        }
        Property {
            name: "aoSampleRate"
            type: "int"
            read: "aoSampleRate"
            write: "setAoSampleRate"
            notify: "aoSampleRateChanged"
            index: 12
        }
        Property {
            name: "aoBias"
            type: "float"
            read: "aoBias"
            write: "setAoBias"
            notify: "aoBiasChanged"
            index: 13
        }
        Property {
            name: "lightProbe"
            type: "QQuick3DTexture"
            isPointer: true
            read: "lightProbe"
            write: "setLightProbe"
            notify: "lightProbeChanged"
            index: 14
        }
        Property {
            name: "probeExposure"
            type: "float"
            read: "probeExposure"
            write: "setProbeExposure"
            notify: "probeExposureChanged"
            index: 15
        }
        Property {
            name: "probeHorizon"
            type: "float"
            read: "probeHorizon"
            write: "setProbeHorizon"
            notify: "probeHorizonChanged"
            index: 16
        }
        Property {
            name: "probeOrientation"
            type: "QVector3D"
            read: "probeOrientation"
            write: "setProbeOrientation"
            notify: "probeOrientationChanged"
            index: 17
        }
        Property {
            name: "tonemapMode"
            type: "QQuick3DEnvironmentTonemapModes"
            read: "tonemapMode"
            write: "setTonemapMode"
            notify: "tonemapModeChanged"
            index: 18
        }
        Property {
            name: "effects"
            type: "QQuick3DEffect"
            isList: true
            read: "effects"
            index: 19
            isReadonly: true
        }
        Signal { name: "antialiasingModeChanged" }
        Signal { name: "antialiasingQualityChanged" }
        Signal { name: "temporalAAEnabledChanged" }
        Signal { name: "temporalAAStrengthChanged" }
        Signal { name: "backgroundModeChanged" }
        Signal { name: "clearColorChanged" }
        Signal { name: "aoStrengthChanged" }
        Signal { name: "aoDistanceChanged" }
        Signal { name: "aoSoftnessChanged" }
        Signal { name: "aoDitherChanged" }
        Signal { name: "aoSampleRateChanged" }
        Signal { name: "aoBiasChanged" }
        Signal { name: "lightProbeChanged" }
        Signal { name: "probeExposureChanged" }
        Signal { name: "probeHorizonChanged" }
        Signal { name: "probeOrientationChanged" }
        Signal { name: "depthTestEnabledChanged" }
        Signal { name: "depthPrePassEnabledChanged" }
        Signal { name: "tonemapModeChanged" }
        Method {
            name: "setAntialiasingMode"
            Parameter {
                name: "antialiasingMode"
                type: "QQuick3DSceneEnvironment::QQuick3DEnvironmentAAModeValues"
            }
        }
        Method {
            name: "setAntialiasingQuality"
            Parameter {
                name: "antialiasingQuality"
                type: "QQuick3DSceneEnvironment::QQuick3DEnvironmentAAQualityValues"
            }
        }
        Method {
            name: "setTemporalAAEnabled"
            Parameter { name: "temporalAAEnabled"; type: "bool" }
        }
        Method {
            name: "setTemporalAAStrength"
            Parameter { name: "strength"; type: "float" }
        }
        Method {
            name: "setBackgroundMode"
            Parameter {
                name: "backgroundMode"
                type: "QQuick3DSceneEnvironment::QQuick3DEnvironmentBackgroundTypes"
            }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Method {
            name: "setAoStrength"
            Parameter { name: "aoStrength"; type: "float" }
        }
        Method {
            name: "setAoDistance"
            Parameter { name: "aoDistance"; type: "float" }
        }
        Method {
            name: "setAoSoftness"
            Parameter { name: "aoSoftness"; type: "float" }
        }
        Method {
            name: "setAoDither"
            Parameter { name: "aoDither"; type: "bool" }
        }
        Method {
            name: "setAoSampleRate"
            Parameter { name: "aoSampleRate"; type: "int" }
        }
        Method {
            name: "setAoBias"
            Parameter { name: "aoBias"; type: "float" }
        }
        Method {
            name: "setLightProbe"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setProbeExposure"
            Parameter { name: "probeExposure"; type: "float" }
        }
        Method {
            name: "setProbeHorizon"
            Parameter { name: "probeHorizon"; type: "float" }
        }
        Method {
            name: "setProbeOrientation"
            Parameter { name: "orientation"; type: "QVector3D" }
        }
        Method {
            name: "setDepthTestEnabled"
            Parameter { name: "depthTestEnabled"; type: "bool" }
        }
        Method {
            name: "setDepthPrePassEnabled"
            Parameter { name: "depthPrePassEnabled"; type: "bool" }
        }
        Method {
            name: "setTonemapMode"
            Parameter {
                name: "tonemapMode"
                type: "QQuick3DSceneEnvironment::QQuick3DEnvironmentTonemapModes"
            }
        }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsApplyValue"
        accessSemantics: "reference"
        prototype: "QQuick3DShaderUtilsRenderCommand"
        exports: ["QtQuick3D/SetUniformValue 6.0"]
        exportMetaObjectRevisions: [1536]
        Property { name: "target"; type: "QByteArray"; index: 0 }
        Property { name: "value"; type: "QVariant"; index: 1 }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsBuffer"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Buffer 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "TextureFilterOperation"
            values: ["Unknown", "Nearest", "Linear"]
        }
        Enum {
            name: "TextureCoordOperation"
            values: ["Unknown", "ClampToEdge", "MirroredRepeat", "Repeat"]
        }
        Enum {
            name: "AllocateBufferFlagValues"
            values: ["None", "SceneLifetime"]
        }
        Enum {
            name: "TextureFormat"
            values: [
                "Unknown",
                "RGBA8",
                "RGBA16F",
                "RGBA32F",
                "R8",
                "R16",
                "R16F",
                "R32F"
            ]
        }
        Property { name: "format"; type: "TextureFormat"; read: "format"; write: "setFormat"; index: 0 }
        Property {
            name: "textureFilterOperation"
            type: "TextureFilterOperation"
            read: "textureFilterOperation"
            write: "setTextureFilterOperation"
            index: 1
        }
        Property {
            name: "textureCoordOperation"
            type: "TextureCoordOperation"
            read: "textureCoordOperation"
            write: "setTextureCoordOperation"
            index: 2
        }
        Property { name: "sizeMultiplier"; type: "float"; index: 3 }
        Property {
            name: "bufferFlags"
            type: "AllocateBufferFlagValues"
            read: "bufferFlags"
            write: "setBufferFlags"
            index: 4
        }
        Property { name: "name"; type: "QByteArray"; index: 5 }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsBufferInput"
        accessSemantics: "reference"
        prototype: "QQuick3DShaderUtilsRenderCommand"
        exports: ["QtQuick3D/BufferInput 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "buffer"
            type: "QQuick3DShaderUtilsBuffer"
            isPointer: true
            read: "buffer"
            write: "setBuffer"
            index: 0
        }
        Property { name: "sampler"; type: "QByteArray"; index: 1 }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsRenderCommand"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Command 6.0"]
        exportMetaObjectRevisions: [1536]
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsRenderPass"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Pass 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "commands"
            type: "QQuick3DShaderUtilsRenderCommand"
            isList: true
            read: "commands"
            index: 0
            isReadonly: true
        }
        Property { name: "output"; type: "QQuick3DShaderUtilsBuffer"; isPointer: true; index: 1 }
        Property {
            name: "shaders"
            type: "QQuick3DShaderUtilsShader"
            isList: true
            read: "shaders"
            index: 2
            isReadonly: true
        }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsShader"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Shader 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Stage"
            values: ["Vertex", "Fragment"]
        }
        Property { name: "shader"; type: "QUrl"; index: 0 }
        Property { name: "stage"; type: "Stage"; index: 1 }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsTextureInput"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/TextureInput 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "texture"
            type: "QQuick3DTexture"
            isPointer: true
            read: "texture"
            write: "setTexture"
            notify: "textureChanged"
            index: 0
        }
        Property { name: "enabled"; type: "bool"; notify: "enabledChanged"; index: 1 }
        Signal { name: "textureChanged" }
        Signal { name: "enabledChanged" }
        Method {
            name: "setTexture"
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dskeleton_p.h"
        name: "QQuick3DSkeleton"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Skeleton 6.0"]
        exportMetaObjectRevisions: [1536]
        Signal { name: "skeletonNodeDirty" }
    }
    Component {
        file: "private/qquick3dspotlight_p.h"
        name: "QQuick3DSpotLight"
        accessSemantics: "reference"
        prototype: "QQuick3DAbstractLight"
        exports: ["QtQuick3D/SpotLight 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "constantFade"
            type: "float"
            read: "constantFade"
            write: "setConstantFade"
            notify: "constantFadeChanged"
            index: 0
        }
        Property {
            name: "linearFade"
            type: "float"
            read: "linearFade"
            write: "setLinearFade"
            notify: "linearFadeChanged"
            index: 1
        }
        Property {
            name: "quadraticFade"
            type: "float"
            read: "quadraticFade"
            write: "setQuadraticFade"
            notify: "quadraticFadeChanged"
            index: 2
        }
        Property {
            name: "coneAngle"
            type: "float"
            read: "coneAngle"
            write: "setConeAngle"
            notify: "coneAngleChanged"
            index: 3
        }
        Property {
            name: "innerConeAngle"
            type: "float"
            read: "innerConeAngle"
            write: "setInnerConeAngle"
            notify: "innerConeAngleChanged"
            index: 4
        }
        Signal { name: "constantFadeChanged" }
        Signal { name: "linearFadeChanged" }
        Signal { name: "quadraticFadeChanged" }
        Signal { name: "coneAngleChanged" }
        Signal { name: "innerConeAngleChanged" }
        Method {
            name: "setConstantFade"
            Parameter { name: "constantFade"; type: "float" }
        }
        Method {
            name: "setLinearFade"
            Parameter { name: "linearFade"; type: "float" }
        }
        Method {
            name: "setQuadraticFade"
            Parameter { name: "quadraticFade"; type: "float" }
        }
        Method {
            name: "setConeAngle"
            Parameter { name: "coneAngle"; type: "float" }
        }
        Method {
            name: "setInnerConeAngle"
            Parameter { name: "innerConeAngle"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dtexture_p.h"
        name: "QQuick3DTexture"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Texture 6.0", "QtQuick3D/Texture 6.2"]
        exportMetaObjectRevisions: [1536, 1538]
        Enum {
            name: "MappingMode"
            values: ["UV", "Environment", "LightProbe"]
        }
        Enum {
            name: "TilingMode"
            values: ["ClampToEdge", "MirroredRepeat", "Repeat"]
        }
        Enum {
            name: "Filter"
            values: ["None", "Nearest", "Linear"]
        }
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "sourceItem"
            type: "QQuickItem"
            isPointer: true
            read: "sourceItem"
            write: "setSourceItem"
            notify: "sourceItemChanged"
            index: 1
        }
        Property {
            name: "textureData"
            type: "QQuick3DTextureData"
            isPointer: true
            read: "textureData"
            write: "setTextureData"
            notify: "textureDataChanged"
            index: 2
        }
        Property {
            name: "scaleU"
            type: "float"
            read: "scaleU"
            write: "setScaleU"
            notify: "scaleUChanged"
            index: 3
        }
        Property {
            name: "scaleV"
            type: "float"
            read: "scaleV"
            write: "setScaleV"
            notify: "scaleVChanged"
            index: 4
        }
        Property {
            name: "mappingMode"
            type: "MappingMode"
            read: "mappingMode"
            write: "setMappingMode"
            notify: "mappingModeChanged"
            index: 5
        }
        Property {
            name: "tilingModeHorizontal"
            type: "TilingMode"
            read: "horizontalTiling"
            write: "setHorizontalTiling"
            notify: "horizontalTilingChanged"
            index: 6
        }
        Property {
            name: "tilingModeVertical"
            type: "TilingMode"
            read: "verticalTiling"
            write: "setVerticalTiling"
            notify: "verticalTilingChanged"
            index: 7
        }
        Property {
            name: "rotationUV"
            type: "float"
            read: "rotationUV"
            write: "setRotationUV"
            notify: "rotationUVChanged"
            index: 8
        }
        Property {
            name: "positionU"
            type: "float"
            read: "positionU"
            write: "setPositionU"
            notify: "positionUChanged"
            index: 9
        }
        Property {
            name: "positionV"
            type: "float"
            read: "positionV"
            write: "setPositionV"
            notify: "positionVChanged"
            index: 10
        }
        Property {
            name: "pivotU"
            type: "float"
            read: "pivotU"
            write: "setPivotU"
            notify: "pivotUChanged"
            index: 11
        }
        Property {
            name: "pivotV"
            type: "float"
            read: "pivotV"
            write: "setPivotV"
            notify: "pivotVChanged"
            index: 12
        }
        Property {
            name: "flipU"
            type: "bool"
            read: "flipU"
            write: "setFlipU"
            notify: "flipUChanged"
            index: 13
        }
        Property {
            name: "flipV"
            type: "bool"
            read: "flipV"
            write: "setFlipV"
            notify: "flipVChanged"
            index: 14
        }
        Property {
            name: "indexUV"
            type: "int"
            read: "indexUV"
            write: "setIndexUV"
            notify: "indexUVChanged"
            index: 15
        }
        Property {
            name: "magFilter"
            type: "Filter"
            read: "magFilter"
            write: "setMagFilter"
            notify: "magFilterChanged"
            index: 16
        }
        Property {
            name: "minFilter"
            type: "Filter"
            read: "minFilter"
            write: "setMinFilter"
            notify: "minFilterChanged"
            index: 17
        }
        Property {
            name: "mipFilter"
            type: "Filter"
            read: "mipFilter"
            write: "setMipFilter"
            notify: "mipFilterChanged"
            index: 18
        }
        Property {
            name: "generateMipmaps"
            type: "bool"
            read: "generateMipmaps"
            write: "setGenerateMipmaps"
            notify: "generateMipmapsChanged"
            index: 19
        }
        Property {
            name: "autoOrientation"
            revision: 1538
            type: "bool"
            read: "autoOrientation"
            write: "setAutoOrientation"
            notify: "autoOrientationChanged"
            index: 20
        }
        Signal { name: "sourceChanged" }
        Signal { name: "sourceItemChanged" }
        Signal { name: "scaleUChanged" }
        Signal { name: "scaleVChanged" }
        Signal { name: "mappingModeChanged" }
        Signal { name: "horizontalTilingChanged" }
        Signal { name: "verticalTilingChanged" }
        Signal { name: "rotationUVChanged" }
        Signal { name: "positionUChanged" }
        Signal { name: "positionVChanged" }
        Signal { name: "pivotUChanged" }
        Signal { name: "pivotVChanged" }
        Signal { name: "flipUChanged" }
        Signal { name: "flipVChanged" }
        Signal { name: "indexUVChanged" }
        Signal { name: "magFilterChanged" }
        Signal { name: "minFilterChanged" }
        Signal { name: "mipFilterChanged" }
        Signal { name: "textureDataChanged" }
        Signal { name: "generateMipmapsChanged" }
        Signal { name: "autoOrientationChanged" }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSourceItem"
            Parameter { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setScaleU"
            Parameter { name: "scaleU"; type: "float" }
        }
        Method {
            name: "setScaleV"
            Parameter { name: "scaleV"; type: "float" }
        }
        Method {
            name: "setMappingMode"
            Parameter { name: "mappingMode"; type: "QQuick3DTexture::MappingMode" }
        }
        Method {
            name: "setHorizontalTiling"
            Parameter { name: "tilingModeHorizontal"; type: "QQuick3DTexture::TilingMode" }
        }
        Method {
            name: "setVerticalTiling"
            Parameter { name: "tilingModeVertical"; type: "QQuick3DTexture::TilingMode" }
        }
        Method {
            name: "setRotationUV"
            Parameter { name: "rotationUV"; type: "float" }
        }
        Method {
            name: "setPositionU"
            Parameter { name: "positionU"; type: "float" }
        }
        Method {
            name: "setPositionV"
            Parameter { name: "positionV"; type: "float" }
        }
        Method {
            name: "setPivotU"
            Parameter { name: "pivotU"; type: "float" }
        }
        Method {
            name: "setPivotV"
            Parameter { name: "pivotV"; type: "float" }
        }
        Method {
            name: "setFlipU"
            Parameter { name: "flipU"; type: "bool" }
        }
        Method {
            name: "setFlipV"
            Parameter { name: "flipV"; type: "bool" }
        }
        Method {
            name: "setIndexUV"
            Parameter { name: "indexUV"; type: "int" }
        }
        Method {
            name: "setMagFilter"
            Parameter { name: "magFilter"; type: "QQuick3DTexture::Filter" }
        }
        Method {
            name: "setMinFilter"
            Parameter { name: "minFilter"; type: "QQuick3DTexture::Filter" }
        }
        Method {
            name: "setMipFilter"
            Parameter { name: "mipFilter"; type: "QQuick3DTexture::Filter" }
        }
        Method {
            name: "setTextureData"
            Parameter { name: "textureData"; type: "QQuick3DTextureData"; isPointer: true }
        }
        Method {
            name: "setGenerateMipmaps"
            Parameter { name: "generateMipmaps"; type: "bool" }
        }
        Method {
            name: "setAutoOrientation"
            Parameter { name: "autoOrientation"; type: "bool" }
        }
        Method {
            name: "sourceItemDestroyed"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "qquick3dtexturedata.h"
        name: "QQuick3DTextureData"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/TextureData 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Format"
            values: [
                "None",
                "RGBA8",
                "RGBA16F",
                "RGBA32F",
                "RGBE8",
                "R8",
                "R16",
                "R16F",
                "R32F",
                "BC1",
                "BC2",
                "BC3",
                "BC4",
                "BC5",
                "BC6H",
                "BC7",
                "DXT1_RGBA",
                "DXT1_RGB",
                "DXT3_RGBA",
                "DXT5_RGBA",
                "ETC2_RGB8",
                "ETC2_RGB8A1",
                "ETC2_RGBA8",
                "ASTC_4x4",
                "ASTC_5x4",
                "ASTC_5x5",
                "ASTC_6x5",
                "ASTC_6x6",
                "ASTC_8x5",
                "ASTC_8x6",
                "ASTC_8x8",
                "ASTC_10x5",
                "ASTC_10x6",
                "ASTC_10x8",
                "ASTC_10x10",
                "ASTC_12x10",
                "ASTC_12x12"
            ]
        }
        Signal { name: "textureDataNodeDirty" }
    }
    Component {
        file: "private/qquick3dviewport_p.h"
        name: "QQuick3DViewport"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtQuick3D/View3D 6.0",
            "QtQuick3D/View3D 6.2",
            "QtQuick3D/View3D 6.3"
        ]
        exportMetaObjectRevisions: [1536, 1538, 1539]
        Enum {
            name: "RenderMode"
            values: ["Offscreen", "Underlay", "Overlay", "Inline"]
        }
        Property {
            name: "data"
            type: "QObject"
            isList: true
            read: "data"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "camera"
            type: "QQuick3DCamera"
            isPointer: true
            read: "camera"
            write: "setCamera"
            notify: "cameraChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "environment"
            type: "QQuick3DSceneEnvironment"
            isPointer: true
            read: "environment"
            write: "setEnvironment"
            notify: "environmentChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "scene"
            type: "QQuick3DNode"
            isPointer: true
            read: "scene"
            notify: "sceneChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "importScene"
            type: "QQuick3DNode"
            isPointer: true
            read: "importScene"
            write: "setImportScene"
            notify: "importSceneChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "renderMode"
            type: "RenderMode"
            read: "renderMode"
            write: "setRenderMode"
            notify: "renderModeChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "renderStats"
            type: "QQuick3DRenderStats"
            isPointer: true
            read: "renderStats"
            index: 6
            isReadonly: true
        }
        Signal { name: "cameraChanged" }
        Signal { name: "environmentChanged" }
        Signal { name: "sceneChanged" }
        Signal { name: "importSceneChanged" }
        Signal { name: "renderModeChanged" }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "QQuick3DCamera"; isPointer: true }
        }
        Method {
            name: "setEnvironment"
            Parameter { name: "environment"; type: "QQuick3DSceneEnvironment"; isPointer: true }
        }
        Method {
            name: "setImportScene"
            Parameter { name: "inScene"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setRenderMode"
            Parameter { name: "renderMode"; type: "QQuick3DViewport::RenderMode" }
        }
        Method { name: "cleanupDirectRenderer" }
        Method {
            name: "setGlobalPickingEnabled"
            Parameter { name: "isEnabled"; type: "bool" }
        }
        Method { name: "invalidateSceneGraph" }
        Method { name: "cleanupResources" }
        Method {
            name: "mapFrom3DScene"
            type: "QVector3D"
            Parameter { name: "scenePos"; type: "QVector3D" }
        }
        Method {
            name: "mapTo3DScene"
            type: "QVector3D"
            Parameter { name: "viewPos"; type: "QVector3D" }
        }
        Method {
            name: "pick"
            type: "QQuick3DPickResult"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "pickAll"
            revision: 1538
            type: "QList<QQuick3DPickResult>"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "rayPick"
            revision: 1538
            type: "QQuick3DPickResult"
            Parameter { name: "origin"; type: "QVector3D" }
            Parameter { name: "direction"; type: "QVector3D" }
        }
        Method {
            name: "rayPickAll"
            revision: 1538
            type: "QList<QQuick3DPickResult>"
            Parameter { name: "origin"; type: "QVector3D" }
            Parameter { name: "direction"; type: "QVector3D" }
        }
    }
}
