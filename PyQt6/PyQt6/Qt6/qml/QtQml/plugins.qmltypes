import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QList<bool>"
        accessSemantics: "sequence"
        valueType: "bool"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "std::vector<bool>"
        accessSemantics: "sequence"
        valueType: "bool"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QList<int>"
        accessSemantics: "sequence"
        valueType: "int"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "std::vector<int>"
        accessSemantics: "sequence"
        valueType: "int"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QItemSelection"
        accessSemantics: "sequence"
        valueType: "QItemSelectionRange"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QModelIndexList"
        accessSemantics: "sequence"
        valueType: "QModelIndex"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "std::vector<QModelIndex>"
        accessSemantics: "sequence"
        valueType: "QModelIndex"
    }
    Component {
        file: "private/qqmlengine_p.h"
        name: "QObject"
        accessSemantics: "reference"
        exports: ["QtQml/QtObject 2.0", "QtQml/QtObject 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property {
            name: "objectName"
            type: "QString"
            bindable: "bindableObjectName"
            read: "objectName"
            write: "setObjectName"
            notify: "objectNameChanged"
            index: 0
        }
        Signal {
            name: "objectNameChanged"
            Parameter { name: "objectName"; type: "QString" }
        }
        Method {
            name: "_q_reregisterTimers"
            Parameter { type: "void"; isPointer: true }
        }
        Method { name: "toString"; type: "string" }
        Method { name: "destroy" }
        Method {
            name: "destroy"
            Parameter { name: "delay"; type: "int" }
        }
    }
    Component {
        file: "private/qqmlglobal_p.h"
        name: "QQmlApplication"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "arguments"; type: "QStringList"; read: "args"; index: 0; isReadonly: true }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 1
        }
        Property {
            name: "version"
            type: "QString"
            read: "version"
            write: "setVersion"
            notify: "versionChanged"
            index: 2
        }
        Property {
            name: "organization"
            type: "QString"
            read: "organization"
            write: "setOrganization"
            notify: "organizationChanged"
            index: 3
        }
        Property {
            name: "domain"
            type: "QString"
            read: "domain"
            write: "setDomain"
            notify: "domainChanged"
            index: 4
        }
        Signal { name: "aboutToQuit" }
        Signal { name: "nameChanged" }
        Signal { name: "versionChanged" }
        Signal { name: "organizationChanged" }
        Signal { name: "domainChanged" }
        Method {
            name: "setName"
            Parameter { name: "arg"; type: "QString" }
        }
        Method {
            name: "setVersion"
            Parameter { name: "arg"; type: "QString" }
        }
        Method {
            name: "setOrganization"
            Parameter { name: "arg"; type: "QString" }
        }
        Method {
            name: "setDomain"
            Parameter { name: "arg"; type: "QString" }
        }
    }
    Component {
        file: "private/qqmlbind_p.h"
        name: "QQmlBind"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus", "QQmlPropertyValueSource"]
        immediateNames: [
            "objectName",
            "target",
            "property",
            "value",
            "when",
            "delayed",
            "restoreMode"
        ]
        exports: [
            "QtQml/Binding 2.0",
            "QtQml/Binding 2.8",
            "QtQml/Binding 2.14",
            "QtQml/Binding 6.0"
        ]
        exportMetaObjectRevisions: [512, 520, 526, 1536]
        Enum {
            name: "RestorationMode"
            values: [
                "RestoreNone",
                "RestoreBinding",
                "RestoreValue",
                "RestoreBindingOrValue"
            ]
        }
        Property {
            name: "target"
            type: "QObject"
            isPointer: true
            read: "object"
            write: "setObject"
            index: 0
        }
        Property { name: "property"; type: "QString"; read: "property"; write: "setProperty"; index: 1 }
        Property { name: "value"; type: "QVariant"; read: "value"; write: "setValue"; index: 2 }
        Property { name: "when"; type: "bool"; read: "when"; write: "setWhen"; index: 3 }
        Property {
            name: "delayed"
            revision: 520
            type: "bool"
            read: "delayed"
            write: "setDelayed"
            index: 4
        }
        Property {
            name: "restoreMode"
            revision: 526
            type: "RestorationMode"
            read: "restoreMode"
            write: "setRestoreMode"
            notify: "restoreModeChanged"
            index: 5
        }
        Signal { name: "restoreModeChanged" }
        Method { name: "targetValueChanged" }
    }
    Component {
        file: "qqmlcomponent.h"
        name: "QQmlComponent"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQml/Component 2.0", "QtQml/Component 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        attachedType: "QQmlComponentAttached"
        Enum {
            name: "CompilationMode"
            values: ["PreferSynchronous", "Asynchronous"]
        }
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property {
            name: "progress"
            type: "double"
            read: "progress"
            notify: "progressChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "status"
            type: "Status"
            read: "status"
            notify: "statusChanged"
            index: 1
            isReadonly: true
        }
        Property { name: "url"; type: "QUrl"; read: "url"; index: 2; isReadonly: true }
        Signal {
            name: "statusChanged"
            Parameter { type: "QQmlComponent::Status" }
        }
        Signal {
            name: "progressChanged"
            Parameter { type: "double" }
        }
        Method {
            name: "loadUrl"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "loadUrl"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "mode"; type: "CompilationMode" }
        }
        Method {
            name: "setData"
            Parameter { type: "QByteArray" }
            Parameter { name: "baseUrl"; type: "QUrl" }
        }
        Method { name: "errorString"; type: "QString" }
        Method { name: "createObject"; isJavaScriptFunction: true }
        Method {
            name: "createObject"
            type: "QObject"
            isPointer: true
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "createObject"
            type: "QObject"
            isPointer: true
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method { name: "createObject"; type: "QObject"; isPointer: true }
        Method { name: "incubateObject"; isJavaScriptFunction: true }
    }
    Component {
        file: "private/qqmlcomponentattached_p.h"
        name: "QQmlComponentAttached"
        accessSemantics: "reference"
        prototype: "QObject"
        Signal { name: "completed" }
        Signal { name: "destruction" }
    }
    Component {
        file: "private/qqmlconnections_p.h"
        name: "QQmlConnections"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQml/Connections 2.0",
            "QtQml/Connections 2.3",
            "QtQml/Connections 6.0"
        ]
        hasCustomParser: true
        exportMetaObjectRevisions: [512, 515, 1536]
        Property {
            name: "target"
            type: "QObject"
            isPointer: true
            read: "target"
            write: "setTarget"
            notify: "targetChanged"
            index: 0
        }
        Property {
            name: "enabled"
            revision: 515
            type: "bool"
            read: "isEnabled"
            write: "setEnabled"
            notify: "enabledChanged"
            index: 1
        }
        Property {
            name: "ignoreUnknownSignals"
            type: "bool"
            read: "ignoreUnknownSignals"
            write: "setIgnoreUnknownSignals"
            index: 2
        }
        Signal { name: "targetChanged" }
        Signal { name: "enabledChanged"; revision: 515 }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlEasingEnums"
        accessSemantics: "none"
        exports: ["QtQml/Easing 2.0", "QtQml/Easing 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "Type"
            values: [
                "Linear",
                "InQuad",
                "OutQuad",
                "InOutQuad",
                "OutInQuad",
                "InCubic",
                "OutCubic",
                "InOutCubic",
                "OutInCubic",
                "InQuart",
                "OutQuart",
                "InOutQuart",
                "OutInQuart",
                "InQuint",
                "OutQuint",
                "InOutQuint",
                "OutInQuint",
                "InSine",
                "OutSine",
                "InOutSine",
                "OutInSine",
                "InExpo",
                "OutExpo",
                "InOutExpo",
                "OutInExpo",
                "InCirc",
                "OutCirc",
                "InOutCirc",
                "OutInCirc",
                "InElastic",
                "OutElastic",
                "InOutElastic",
                "OutInElastic",
                "InBack",
                "OutBack",
                "InOutBack",
                "OutInBack",
                "InBounce",
                "OutBounce",
                "InOutBounce",
                "OutInBounce",
                "InCurve",
                "OutCurve",
                "SineCurve",
                "CosineCurve",
                "BezierSpline",
                "Bezier"
            ]
        }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QEasingCurve"
        accessSemantics: "value"
        extension: "QQmlEasingValueType"
        Enum {
            name: "Type"
            values: [
                "Linear",
                "InQuad",
                "OutQuad",
                "InOutQuad",
                "OutInQuad",
                "InCubic",
                "OutCubic",
                "InOutCubic",
                "OutInCubic",
                "InQuart",
                "OutQuart",
                "InOutQuart",
                "OutInQuart",
                "InQuint",
                "OutQuint",
                "InOutQuint",
                "OutInQuint",
                "InSine",
                "OutSine",
                "InOutSine",
                "OutInSine",
                "InExpo",
                "OutExpo",
                "InOutExpo",
                "OutInExpo",
                "InCirc",
                "OutCirc",
                "InOutCirc",
                "OutInCirc",
                "InElastic",
                "OutElastic",
                "InOutElastic",
                "OutInElastic",
                "InBack",
                "OutBack",
                "InOutBack",
                "OutInBack",
                "InBounce",
                "OutBounce",
                "InOutBounce",
                "OutInBounce",
                "InCurve",
                "OutCurve",
                "SineCurve",
                "CosineCurve",
                "BezierSpline",
                "TCBSpline",
                "Custom",
                "NCurveTypes"
            ]
        }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlEasingValueType"
        accessSemantics: "value"
        Property {
            name: "type"
            type: "QQmlEasingEnums::Type"
            read: "type"
            write: "setType"
            index: 0
            isFinal: true
        }
        Property {
            name: "amplitude"
            type: "double"
            read: "amplitude"
            write: "setAmplitude"
            index: 1
            isFinal: true
        }
        Property {
            name: "overshoot"
            type: "double"
            read: "overshoot"
            write: "setOvershoot"
            index: 2
            isFinal: true
        }
        Property {
            name: "period"
            type: "double"
            read: "period"
            write: "setPeriod"
            index: 3
            isFinal: true
        }
        Property {
            name: "bezierCurve"
            type: "QVariantList"
            read: "bezierCurve"
            write: "setBezierCurve"
            index: 4
            isFinal: true
        }
    }
    Component {
        file: "private/qqmllocale_p.h"
        name: "QQmlLocale"
        accessSemantics: "none"
        exports: ["QtQml/Locale 2.2", "QtQml/Locale 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [514, 1536]
        Enum {
            name: "MeasurementSystem"
            values: [
                "MetricSystem",
                "ImperialSystem",
                "ImperialUSSystem",
                "ImperialUKSystem"
            ]
        }
        Enum {
            name: "FormatType"
            values: ["LongFormat", "ShortFormat", "NarrowFormat"]
        }
        Enum {
            name: "CurrencySymbolFormat"
            values: [
                "CurrencyIsoCode",
                "CurrencySymbol",
                "CurrencyDisplayName"
            ]
        }
        Enum {
            name: "DayOfWeek"
            values: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
            ]
        }
        Enum {
            name: "NumberOptions"
            values: [
                "DefaultNumberOptions",
                "OmitGroupSeparator",
                "RejectGroupSeparator",
                "OmitLeadingZeroInExponent",
                "RejectLeadingZeroInExponent",
                "IncludeTrailingZeroesAfterDot",
                "RejectTrailingZeroesAfterDot"
            ]
        }
        Enum {
            name: "DataSizeFormat"
            values: [
                "DataSizeBase1000",
                "DataSizeSIQuantifiers",
                "DataSizeIecFormat",
                "DataSizeTraditionalFormat",
                "DataSizeSIFormat"
            ]
        }
    }
    Component {
        file: "private/qqmlloggingcategory_p.h"
        name: "QQmlLoggingCategory"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtQml/LoggingCategory 2.8",
            "QtQml/LoggingCategory 2.12",
            "QtQml/LoggingCategory 6.0"
        ]
        exportMetaObjectRevisions: [520, 524, 1536]
        Enum {
            name: "DefaultLogLevel"
            values: ["Debug", "Info", "Warning", "Critical", "Fatal"]
        }
        Property { name: "name"; type: "QString"; read: "name"; write: "setName"; index: 0 }
        Property {
            name: "defaultLogLevel"
            revision: 524
            type: "DefaultLogLevel"
            read: "defaultLogLevel"
            write: "setDefaultLogLevel"
            index: 1
        }
    }
    Component {
        file: "private/qqmlplatform_p.h"
        name: "QQmlPlatform"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "os"; type: "QString"; read: "os"; index: 0; isReadonly: true }
        Property { name: "pluginName"; type: "QString"; read: "pluginName"; index: 1; isReadonly: true }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QPointF"
        accessSemantics: "value"
        extension: "QQmlPointFValueType"
        exports: ["QtQml/point 2.0", "QtQml/point 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlPointFValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "double"; read: "x"; write: "setX"; index: 0; isFinal: true }
        Property { name: "y"; type: "double"; read: "y"; write: "setY"; index: 1; isFinal: true }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QPoint"
        accessSemantics: "value"
        extension: "QQmlPointValueType"
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlPointValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "int"; read: "x"; write: "setX"; index: 0; isFinal: true }
        Property { name: "y"; type: "int"; read: "y"; write: "setY"; index: 1; isFinal: true }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "qqmlproperty.h"
        name: "QQmlProperty"
        accessSemantics: "value"
        Property {
            name: "object"
            type: "QObject"
            isPointer: true
            read: "object"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property { name: "name"; type: "QString"; read: "name"; index: 1; isReadonly: true; isFinal: true }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QRectF"
        accessSemantics: "value"
        extension: "QQmlRectFValueType"
        exports: ["QtQml/rect 2.0", "QtQml/rect 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlRectFValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "double"; read: "x"; write: "setX"; index: 0; isFinal: true }
        Property { name: "y"; type: "double"; read: "y"; write: "setY"; index: 1; isFinal: true }
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth"; index: 2; isFinal: true }
        Property {
            name: "height"
            type: "double"
            read: "height"
            write: "setHeight"
            index: 3
            isFinal: true
        }
        Property { name: "left"; type: "double"; read: "left"; index: 4; isReadonly: true; isFinal: true }
        Property { name: "right"; type: "double"; read: "right"; index: 5; isReadonly: true; isFinal: true }
        Property { name: "top"; type: "double"; read: "top"; index: 6; isReadonly: true; isFinal: true }
        Property { name: "bottom"; type: "double"; read: "bottom"; index: 7; isReadonly: true; isFinal: true }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QRect"
        accessSemantics: "value"
        extension: "QQmlRectValueType"
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlRectValueType"
        accessSemantics: "value"
        Property { name: "x"; type: "int"; read: "x"; write: "setX"; index: 0; isFinal: true }
        Property { name: "y"; type: "int"; read: "y"; write: "setY"; index: 1; isFinal: true }
        Property { name: "width"; type: "int"; read: "width"; write: "setWidth"; index: 2; isFinal: true }
        Property { name: "height"; type: "int"; read: "height"; write: "setHeight"; index: 3; isFinal: true }
        Property { name: "left"; type: "int"; read: "left"; index: 4; isReadonly: true; isFinal: true }
        Property { name: "right"; type: "int"; read: "right"; index: 5; isReadonly: true; isFinal: true }
        Property { name: "top"; type: "int"; read: "top"; index: 6; isReadonly: true; isFinal: true }
        Property { name: "bottom"; type: "int"; read: "bottom"; index: 7; isReadonly: true; isFinal: true }
        Method { name: "toString"; type: "QString" }
    }
    Component { file: "qqmlscriptstring.h"; name: "QQmlScriptString"; accessSemantics: "value" }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QSizeF"
        accessSemantics: "value"
        extension: "QQmlSizeFValueType"
        exports: ["QtQml/size 2.0", "QtQml/size 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [512, 1536]
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlSizeFValueType"
        accessSemantics: "value"
        Property { name: "width"; type: "double"; read: "width"; write: "setWidth"; index: 0; isFinal: true }
        Property {
            name: "height"
            type: "double"
            read: "height"
            write: "setHeight"
            index: 1
            isFinal: true
        }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QSize"
        accessSemantics: "value"
        extension: "QQmlSizeValueType"
    }
    Component {
        file: "private/qqmlvaluetype_p.h"
        name: "QQmlSizeValueType"
        accessSemantics: "value"
        Property { name: "width"; type: "int"; read: "width"; write: "setWidth"; index: 0; isFinal: true }
        Property { name: "height"; type: "int"; read: "height"; write: "setHeight"; index: 1; isFinal: true }
        Method { name: "toString"; type: "QString" }
    }
    Component {
        file: "private/qqmltimer_p.h"
        name: "QQmlTimer"
        accessSemantics: "reference"
        parentProperty: "parent"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtQml/Timer 2.0", "QtQml/Timer 6.0"]
        exportMetaObjectRevisions: [512, 1536]
        Property {
            name: "interval"
            type: "int"
            read: "interval"
            write: "setInterval"
            notify: "intervalChanged"
            index: 0
        }
        Property {
            name: "running"
            type: "bool"
            read: "isRunning"
            write: "setRunning"
            notify: "runningChanged"
            index: 1
        }
        Property {
            name: "repeat"
            type: "bool"
            read: "isRepeating"
            write: "setRepeating"
            notify: "repeatChanged"
            index: 2
        }
        Property {
            name: "triggeredOnStart"
            type: "bool"
            read: "triggeredOnStart"
            write: "setTriggeredOnStart"
            notify: "triggeredOnStartChanged"
            index: 3
        }
        Property {
            name: "parent"
            type: "QObject"
            isPointer: true
            read: "parent"
            index: 4
            isReadonly: true
        }
        Signal { name: "triggered" }
        Signal { name: "runningChanged" }
        Signal { name: "intervalChanged" }
        Signal { name: "repeatChanged" }
        Signal { name: "triggeredOnStartChanged" }
        Method { name: "start" }
        Method { name: "stop" }
        Method { name: "restart" }
        Method { name: "ticked" }
    }
    Component {
        file: "private/qqmltypenotavailable_p.h"
        name: "QQmlTypeNotAvailable"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQml/TypeNotAvailable 2.15", "QtQml/TypeNotAvailable 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [527, 1536]
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QList<qreal>"
        accessSemantics: "sequence"
        valueType: "double"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "std::vector<qreal>"
        accessSemantics: "sequence"
        valueType: "double"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QStringList"
        accessSemantics: "sequence"
        valueType: "QString"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "std::vector<QString>"
        accessSemantics: "sequence"
        valueType: "QString"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "QList<QUrl>"
        accessSemantics: "sequence"
        valueType: "QUrl"
    }
    Component {
        file: "private/qv4sequenceobject_p.h"
        name: "std::vector<QUrl>"
        accessSemantics: "sequence"
        valueType: "QUrl"
    }
    Component {
        file: "qnamespace.h"
        name: "Qt"
        accessSemantics: "none"
        Enum {
            name: "GlobalColor"
            values: [
                "color0",
                "color1",
                "black",
                "white",
                "darkGray",
                "gray",
                "lightGray",
                "red",
                "green",
                "blue",
                "cyan",
                "magenta",
                "yellow",
                "darkRed",
                "darkGreen",
                "darkBlue",
                "darkCyan",
                "darkMagenta",
                "darkYellow",
                "transparent"
            ]
        }
        Enum {
            name: "MouseButtons"
            alias: "MouseButton"
            isFlag: true
            values: [
                "NoButton",
                "LeftButton",
                "RightButton",
                "MiddleButton",
                "BackButton",
                "XButton1",
                "ExtraButton1",
                "ForwardButton",
                "XButton2",
                "ExtraButton2",
                "TaskButton",
                "ExtraButton3",
                "ExtraButton4",
                "ExtraButton5",
                "ExtraButton6",
                "ExtraButton7",
                "ExtraButton8",
                "ExtraButton9",
                "ExtraButton10",
                "ExtraButton11",
                "ExtraButton12",
                "ExtraButton13",
                "ExtraButton14",
                "ExtraButton15",
                "ExtraButton16",
                "ExtraButton17",
                "ExtraButton18",
                "ExtraButton19",
                "ExtraButton20",
                "ExtraButton21",
                "ExtraButton22",
                "ExtraButton23",
                "ExtraButton24",
                "AllButtons",
                "MaxMouseButton",
                "MouseButtonMask"
            ]
        }
        Enum {
            name: "Orientation"
            values: ["Horizontal", "Vertical"]
        }
        Enum {
            name: "Orientations"
            alias: "Orientation"
            isFlag: true
            values: ["Horizontal", "Vertical"]
        }
        Enum {
            name: "FocusPolicy"
            values: [
                "NoFocus",
                "TabFocus",
                "ClickFocus",
                "StrongFocus",
                "WheelFocus"
            ]
        }
        Enum {
            name: "TabFocusBehavior"
            values: [
                "NoTabFocus",
                "TabFocusTextControls",
                "TabFocusListControls",
                "TabFocusAllControls"
            ]
        }
        Enum {
            name: "SortOrder"
            values: ["AscendingOrder", "DescendingOrder"]
        }
        Enum {
            name: "SplitBehavior"
            alias: "SplitBehaviorFlags"
            isFlag: true
            values: ["KeepEmptyParts", "SkipEmptyParts"]
        }
        Enum {
            name: "Alignment"
            alias: "AlignmentFlag"
            isFlag: true
            values: [
                "AlignLeft",
                "AlignLeading",
                "AlignRight",
                "AlignTrailing",
                "AlignHCenter",
                "AlignJustify",
                "AlignAbsolute",
                "AlignHorizontal_Mask",
                "AlignTop",
                "AlignBottom",
                "AlignVCenter",
                "AlignBaseline",
                "AlignVertical_Mask",
                "AlignCenter"
            ]
        }
        Enum {
            name: "TextFlag"
            values: [
                "TextSingleLine",
                "TextDontClip",
                "TextExpandTabs",
                "TextShowMnemonic",
                "TextWordWrap",
                "TextWrapAnywhere",
                "TextDontPrint",
                "TextIncludeTrailingSpaces",
                "TextHideMnemonic",
                "TextJustificationForced",
                "TextForceLeftToRight",
                "TextForceRightToLeft",
                "TextLongestVariant"
            ]
        }
        Enum {
            name: "TextElideMode"
            values: ["ElideLeft", "ElideRight", "ElideMiddle", "ElideNone"]
        }
        Enum {
            name: "WindowType"
            values: [
                "Widget",
                "Window",
                "Dialog",
                "Sheet",
                "Drawer",
                "Popup",
                "Tool",
                "ToolTip",
                "SplashScreen",
                "Desktop",
                "SubWindow",
                "ForeignWindow",
                "CoverWindow",
                "WindowType_Mask",
                "MSWindowsFixedSizeDialogHint",
                "MSWindowsOwnDC",
                "BypassWindowManagerHint",
                "X11BypassWindowManagerHint",
                "FramelessWindowHint",
                "WindowTitleHint",
                "WindowSystemMenuHint",
                "WindowMinimizeButtonHint",
                "WindowMaximizeButtonHint",
                "WindowMinMaxButtonsHint",
                "WindowContextHelpButtonHint",
                "WindowShadeButtonHint",
                "WindowStaysOnTopHint",
                "WindowTransparentForInput",
                "WindowOverridesSystemGestures",
                "WindowDoesNotAcceptFocus",
                "MaximizeUsingFullscreenGeometryHint",
                "CustomizeWindowHint",
                "WindowStaysOnBottomHint",
                "WindowCloseButtonHint",
                "MacWindowToolBarButtonHint",
                "BypassGraphicsProxyWidget",
                "NoDropShadowWindowHint",
                "WindowFullscreenButtonHint"
            ]
        }
        Enum {
            name: "WindowFlags"
            alias: "WindowType"
            isFlag: true
            values: [
                "Widget",
                "Window",
                "Dialog",
                "Sheet",
                "Drawer",
                "Popup",
                "Tool",
                "ToolTip",
                "SplashScreen",
                "Desktop",
                "SubWindow",
                "ForeignWindow",
                "CoverWindow",
                "WindowType_Mask",
                "MSWindowsFixedSizeDialogHint",
                "MSWindowsOwnDC",
                "BypassWindowManagerHint",
                "X11BypassWindowManagerHint",
                "FramelessWindowHint",
                "WindowTitleHint",
                "WindowSystemMenuHint",
                "WindowMinimizeButtonHint",
                "WindowMaximizeButtonHint",
                "WindowMinMaxButtonsHint",
                "WindowContextHelpButtonHint",
                "WindowShadeButtonHint",
                "WindowStaysOnTopHint",
                "WindowTransparentForInput",
                "WindowOverridesSystemGestures",
                "WindowDoesNotAcceptFocus",
                "MaximizeUsingFullscreenGeometryHint",
                "CustomizeWindowHint",
                "WindowStaysOnBottomHint",
                "WindowCloseButtonHint",
                "MacWindowToolBarButtonHint",
                "BypassGraphicsProxyWidget",
                "NoDropShadowWindowHint",
                "WindowFullscreenButtonHint"
            ]
        }
        Enum {
            name: "WindowState"
            values: [
                "WindowNoState",
                "WindowMinimized",
                "WindowMaximized",
                "WindowFullScreen",
                "WindowActive"
            ]
        }
        Enum {
            name: "WindowStates"
            alias: "WindowState"
            isFlag: true
            values: [
                "WindowNoState",
                "WindowMinimized",
                "WindowMaximized",
                "WindowFullScreen",
                "WindowActive"
            ]
        }
        Enum {
            name: "ApplicationState"
            values: [
                "ApplicationSuspended",
                "ApplicationHidden",
                "ApplicationInactive",
                "ApplicationActive"
            ]
        }
        Enum {
            name: "ScreenOrientation"
            values: [
                "PrimaryOrientation",
                "PortraitOrientation",
                "LandscapeOrientation",
                "InvertedPortraitOrientation",
                "InvertedLandscapeOrientation"
            ]
        }
        Enum {
            name: "ScreenOrientations"
            alias: "ScreenOrientation"
            isFlag: true
            values: [
                "PrimaryOrientation",
                "PortraitOrientation",
                "LandscapeOrientation",
                "InvertedPortraitOrientation",
                "InvertedLandscapeOrientation"
            ]
        }
        Enum {
            name: "WidgetAttribute"
            values: [
                "WA_Disabled",
                "WA_UnderMouse",
                "WA_MouseTracking",
                "WA_OpaquePaintEvent",
                "WA_StaticContents",
                "WA_LaidOut",
                "WA_PaintOnScreen",
                "WA_NoSystemBackground",
                "WA_UpdatesDisabled",
                "WA_Mapped",
                "WA_InputMethodEnabled",
                "WA_WState_Visible",
                "WA_WState_Hidden",
                "WA_ForceDisabled",
                "WA_KeyCompression",
                "WA_PendingMoveEvent",
                "WA_PendingResizeEvent",
                "WA_SetPalette",
                "WA_SetFont",
                "WA_SetCursor",
                "WA_NoChildEventsFromChildren",
                "WA_WindowModified",
                "WA_Resized",
                "WA_Moved",
                "WA_PendingUpdate",
                "WA_InvalidSize",
                "WA_CustomWhatsThis",
                "WA_LayoutOnEntireRect",
                "WA_OutsideWSRange",
                "WA_GrabbedShortcut",
                "WA_TransparentForMouseEvents",
                "WA_PaintUnclipped",
                "WA_SetWindowIcon",
                "WA_NoMouseReplay",
                "WA_DeleteOnClose",
                "WA_RightToLeft",
                "WA_SetLayoutDirection",
                "WA_NoChildEventsForParent",
                "WA_ForceUpdatesDisabled",
                "WA_WState_Created",
                "WA_WState_CompressKeys",
                "WA_WState_InPaintEvent",
                "WA_WState_Reparented",
                "WA_WState_ConfigPending",
                "WA_WState_Polished",
                "WA_WState_OwnSizePolicy",
                "WA_WState_ExplicitShowHide",
                "WA_ShowModal",
                "WA_MouseNoMask",
                "WA_NoMousePropagation",
                "WA_Hover",
                "WA_InputMethodTransparent",
                "WA_QuitOnClose",
                "WA_KeyboardFocusChange",
                "WA_AcceptDrops",
                "WA_DropSiteRegistered",
                "WA_WindowPropagation",
                "WA_NoX11EventCompression",
                "WA_TintedBackground",
                "WA_X11OpenGLOverlay",
                "WA_AlwaysShowToolTips",
                "WA_MacOpaqueSizeGrip",
                "WA_SetStyle",
                "WA_SetLocale",
                "WA_MacShowFocusRect",
                "WA_MacNormalSize",
                "WA_MacSmallSize",
                "WA_MacMiniSize",
                "WA_LayoutUsesWidgetRect",
                "WA_StyledBackground",
                "WA_CanHostQMdiSubWindowTitleBar",
                "WA_MacAlwaysShowToolWindow",
                "WA_StyleSheet",
                "WA_ShowWithoutActivating",
                "WA_X11BypassTransientForHint",
                "WA_NativeWindow",
                "WA_DontCreateNativeAncestors",
                "WA_DontShowOnScreen",
                "WA_X11NetWmWindowTypeDesktop",
                "WA_X11NetWmWindowTypeDock",
                "WA_X11NetWmWindowTypeToolBar",
                "WA_X11NetWmWindowTypeMenu",
                "WA_X11NetWmWindowTypeUtility",
                "WA_X11NetWmWindowTypeSplash",
                "WA_X11NetWmWindowTypeDialog",
                "WA_X11NetWmWindowTypeDropDownMenu",
                "WA_X11NetWmWindowTypePopupMenu",
                "WA_X11NetWmWindowTypeToolTip",
                "WA_X11NetWmWindowTypeNotification",
                "WA_X11NetWmWindowTypeCombo",
                "WA_X11NetWmWindowTypeDND",
                "WA_SetWindowModality",
                "WA_WState_WindowOpacitySet",
                "WA_TranslucentBackground",
                "WA_AcceptTouchEvents",
                "WA_WState_AcceptedTouchBeginEvent",
                "WA_TouchPadAcceptSingleTouchEvents",
                "WA_X11DoNotAcceptFocus",
                "WA_AlwaysStackOnTop",
                "WA_TabletTracking",
                "WA_ContentsMarginsRespectsSafeArea",
                "WA_StyleSheetTarget",
                "WA_AttributeCount"
            ]
        }
        Enum {
            name: "ApplicationAttribute"
            values: [
                "AA_DontShowIconsInMenus",
                "AA_NativeWindows",
                "AA_DontCreateNativeWidgetSiblings",
                "AA_PluginApplication",
                "AA_DontUseNativeMenuBar",
                "AA_MacDontSwapCtrlAndMeta",
                "AA_Use96Dpi",
                "AA_DisableNativeVirtualKeyboard",
                "AA_SynthesizeTouchForUnhandledMouseEvents",
                "AA_SynthesizeMouseForUnhandledTouchEvents",
                "AA_UseHighDpiPixmaps",
                "AA_ForceRasterWidgets",
                "AA_UseDesktopOpenGL",
                "AA_UseOpenGLES",
                "AA_UseSoftwareOpenGL",
                "AA_ShareOpenGLContexts",
                "AA_SetPalette",
                "AA_EnableHighDpiScaling",
                "AA_DisableHighDpiScaling",
                "AA_UseStyleSheetPropagationInWidgetStyles",
                "AA_DontUseNativeDialogs",
                "AA_SynthesizeMouseForUnhandledTabletEvents",
                "AA_CompressHighFrequencyEvents",
                "AA_DontCheckOpenGLContextThreadAffinity",
                "AA_DisableShaderDiskCache",
                "AA_DontShowShortcutsInContextMenus",
                "AA_CompressTabletEvents",
                "AA_DisableSessionManager",
                "AA_AttributeCount"
            ]
        }
        Enum {
            name: "ImageConversionFlags"
            alias: "ImageConversionFlag"
            isFlag: true
            values: [
                "ColorMode_Mask",
                "AutoColor",
                "ColorOnly",
                "MonoOnly",
                "AlphaDither_Mask",
                "ThresholdAlphaDither",
                "OrderedAlphaDither",
                "DiffuseAlphaDither",
                "NoAlpha",
                "Dither_Mask",
                "DiffuseDither",
                "OrderedDither",
                "ThresholdDither",
                "DitherMode_Mask",
                "AutoDither",
                "PreferDither",
                "AvoidDither",
                "NoOpaqueDetection",
                "NoFormatConversion"
            ]
        }
        Enum {
            name: "BGMode"
            values: ["TransparentMode", "OpaqueMode"]
        }
        Enum {
            name: "Key"
            values: [
                "Key_Space",
                "Key_Any",
                "Key_Exclam",
                "Key_QuoteDbl",
                "Key_NumberSign",
                "Key_Dollar",
                "Key_Percent",
                "Key_Ampersand",
                "Key_Apostrophe",
                "Key_ParenLeft",
                "Key_ParenRight",
                "Key_Asterisk",
                "Key_Plus",
                "Key_Comma",
                "Key_Minus",
                "Key_Period",
                "Key_Slash",
                "Key_0",
                "Key_1",
                "Key_2",
                "Key_3",
                "Key_4",
                "Key_5",
                "Key_6",
                "Key_7",
                "Key_8",
                "Key_9",
                "Key_Colon",
                "Key_Semicolon",
                "Key_Less",
                "Key_Equal",
                "Key_Greater",
                "Key_Question",
                "Key_At",
                "Key_A",
                "Key_B",
                "Key_C",
                "Key_D",
                "Key_E",
                "Key_F",
                "Key_G",
                "Key_H",
                "Key_I",
                "Key_J",
                "Key_K",
                "Key_L",
                "Key_M",
                "Key_N",
                "Key_O",
                "Key_P",
                "Key_Q",
                "Key_R",
                "Key_S",
                "Key_T",
                "Key_U",
                "Key_V",
                "Key_W",
                "Key_X",
                "Key_Y",
                "Key_Z",
                "Key_BracketLeft",
                "Key_Backslash",
                "Key_BracketRight",
                "Key_AsciiCircum",
                "Key_Underscore",
                "Key_QuoteLeft",
                "Key_BraceLeft",
                "Key_Bar",
                "Key_BraceRight",
                "Key_AsciiTilde",
                "Key_nobreakspace",
                "Key_exclamdown",
                "Key_cent",
                "Key_sterling",
                "Key_currency",
                "Key_yen",
                "Key_brokenbar",
                "Key_section",
                "Key_diaeresis",
                "Key_copyright",
                "Key_ordfeminine",
                "Key_guillemotleft",
                "Key_notsign",
                "Key_hyphen",
                "Key_registered",
                "Key_macron",
                "Key_degree",
                "Key_plusminus",
                "Key_twosuperior",
                "Key_threesuperior",
                "Key_acute",
                "Key_mu",
                "Key_paragraph",
                "Key_periodcentered",
                "Key_cedilla",
                "Key_onesuperior",
                "Key_masculine",
                "Key_guillemotright",
                "Key_onequarter",
                "Key_onehalf",
                "Key_threequarters",
                "Key_questiondown",
                "Key_Agrave",
                "Key_Aacute",
                "Key_Acircumflex",
                "Key_Atilde",
                "Key_Adiaeresis",
                "Key_Aring",
                "Key_AE",
                "Key_Ccedilla",
                "Key_Egrave",
                "Key_Eacute",
                "Key_Ecircumflex",
                "Key_Ediaeresis",
                "Key_Igrave",
                "Key_Iacute",
                "Key_Icircumflex",
                "Key_Idiaeresis",
                "Key_ETH",
                "Key_Ntilde",
                "Key_Ograve",
                "Key_Oacute",
                "Key_Ocircumflex",
                "Key_Otilde",
                "Key_Odiaeresis",
                "Key_multiply",
                "Key_Ooblique",
                "Key_Ugrave",
                "Key_Uacute",
                "Key_Ucircumflex",
                "Key_Udiaeresis",
                "Key_Yacute",
                "Key_THORN",
                "Key_ssharp",
                "Key_division",
                "Key_ydiaeresis",
                "Key_Escape",
                "Key_Tab",
                "Key_Backtab",
                "Key_Backspace",
                "Key_Return",
                "Key_Enter",
                "Key_Insert",
                "Key_Delete",
                "Key_Pause",
                "Key_Print",
                "Key_SysReq",
                "Key_Clear",
                "Key_Home",
                "Key_End",
                "Key_Left",
                "Key_Up",
                "Key_Right",
                "Key_Down",
                "Key_PageUp",
                "Key_PageDown",
                "Key_Shift",
                "Key_Control",
                "Key_Meta",
                "Key_Alt",
                "Key_CapsLock",
                "Key_NumLock",
                "Key_ScrollLock",
                "Key_F1",
                "Key_F2",
                "Key_F3",
                "Key_F4",
                "Key_F5",
                "Key_F6",
                "Key_F7",
                "Key_F8",
                "Key_F9",
                "Key_F10",
                "Key_F11",
                "Key_F12",
                "Key_F13",
                "Key_F14",
                "Key_F15",
                "Key_F16",
                "Key_F17",
                "Key_F18",
                "Key_F19",
                "Key_F20",
                "Key_F21",
                "Key_F22",
                "Key_F23",
                "Key_F24",
                "Key_F25",
                "Key_F26",
                "Key_F27",
                "Key_F28",
                "Key_F29",
                "Key_F30",
                "Key_F31",
                "Key_F32",
                "Key_F33",
                "Key_F34",
                "Key_F35",
                "Key_Super_L",
                "Key_Super_R",
                "Key_Menu",
                "Key_Hyper_L",
                "Key_Hyper_R",
                "Key_Help",
                "Key_Direction_L",
                "Key_Direction_R",
                "Key_AltGr",
                "Key_Multi_key",
                "Key_Codeinput",
                "Key_SingleCandidate",
                "Key_MultipleCandidate",
                "Key_PreviousCandidate",
                "Key_Mode_switch",
                "Key_Kanji",
                "Key_Muhenkan",
                "Key_Henkan",
                "Key_Romaji",
                "Key_Hiragana",
                "Key_Katakana",
                "Key_Hiragana_Katakana",
                "Key_Zenkaku",
                "Key_Hankaku",
                "Key_Zenkaku_Hankaku",
                "Key_Touroku",
                "Key_Massyo",
                "Key_Kana_Lock",
                "Key_Kana_Shift",
                "Key_Eisu_Shift",
                "Key_Eisu_toggle",
                "Key_Hangul",
                "Key_Hangul_Start",
                "Key_Hangul_End",
                "Key_Hangul_Hanja",
                "Key_Hangul_Jamo",
                "Key_Hangul_Romaja",
                "Key_Hangul_Jeonja",
                "Key_Hangul_Banja",
                "Key_Hangul_PreHanja",
                "Key_Hangul_PostHanja",
                "Key_Hangul_Special",
                "Key_Dead_Grave",
                "Key_Dead_Acute",
                "Key_Dead_Circumflex",
                "Key_Dead_Tilde",
                "Key_Dead_Macron",
                "Key_Dead_Breve",
                "Key_Dead_Abovedot",
                "Key_Dead_Diaeresis",
                "Key_Dead_Abovering",
                "Key_Dead_Doubleacute",
                "Key_Dead_Caron",
                "Key_Dead_Cedilla",
                "Key_Dead_Ogonek",
                "Key_Dead_Iota",
                "Key_Dead_Voiced_Sound",
                "Key_Dead_Semivoiced_Sound",
                "Key_Dead_Belowdot",
                "Key_Dead_Hook",
                "Key_Dead_Horn",
                "Key_Dead_Stroke",
                "Key_Dead_Abovecomma",
                "Key_Dead_Abovereversedcomma",
                "Key_Dead_Doublegrave",
                "Key_Dead_Belowring",
                "Key_Dead_Belowmacron",
                "Key_Dead_Belowcircumflex",
                "Key_Dead_Belowtilde",
                "Key_Dead_Belowbreve",
                "Key_Dead_Belowdiaeresis",
                "Key_Dead_Invertedbreve",
                "Key_Dead_Belowcomma",
                "Key_Dead_Currency",
                "Key_Dead_a",
                "Key_Dead_A",
                "Key_Dead_e",
                "Key_Dead_E",
                "Key_Dead_i",
                "Key_Dead_I",
                "Key_Dead_o",
                "Key_Dead_O",
                "Key_Dead_u",
                "Key_Dead_U",
                "Key_Dead_Small_Schwa",
                "Key_Dead_Capital_Schwa",
                "Key_Dead_Greek",
                "Key_Dead_Lowline",
                "Key_Dead_Aboveverticalline",
                "Key_Dead_Belowverticalline",
                "Key_Dead_Longsolidusoverlay",
                "Key_Back",
                "Key_Forward",
                "Key_Stop",
                "Key_Refresh",
                "Key_VolumeDown",
                "Key_VolumeMute",
                "Key_VolumeUp",
                "Key_BassBoost",
                "Key_BassUp",
                "Key_BassDown",
                "Key_TrebleUp",
                "Key_TrebleDown",
                "Key_MediaPlay",
                "Key_MediaStop",
                "Key_MediaPrevious",
                "Key_MediaNext",
                "Key_MediaRecord",
                "Key_MediaPause",
                "Key_MediaTogglePlayPause",
                "Key_HomePage",
                "Key_Favorites",
                "Key_Search",
                "Key_Standby",
                "Key_OpenUrl",
                "Key_LaunchMail",
                "Key_LaunchMedia",
                "Key_Launch0",
                "Key_Launch1",
                "Key_Launch2",
                "Key_Launch3",
                "Key_Launch4",
                "Key_Launch5",
                "Key_Launch6",
                "Key_Launch7",
                "Key_Launch8",
                "Key_Launch9",
                "Key_LaunchA",
                "Key_LaunchB",
                "Key_LaunchC",
                "Key_LaunchD",
                "Key_LaunchE",
                "Key_LaunchF",
                "Key_MonBrightnessUp",
                "Key_MonBrightnessDown",
                "Key_KeyboardLightOnOff",
                "Key_KeyboardBrightnessUp",
                "Key_KeyboardBrightnessDown",
                "Key_PowerOff",
                "Key_WakeUp",
                "Key_Eject",
                "Key_ScreenSaver",
                "Key_WWW",
                "Key_Memo",
                "Key_LightBulb",
                "Key_Shop",
                "Key_History",
                "Key_AddFavorite",
                "Key_HotLinks",
                "Key_BrightnessAdjust",
                "Key_Finance",
                "Key_Community",
                "Key_AudioRewind",
                "Key_BackForward",
                "Key_ApplicationLeft",
                "Key_ApplicationRight",
                "Key_Book",
                "Key_CD",
                "Key_Calculator",
                "Key_ToDoList",
                "Key_ClearGrab",
                "Key_Close",
                "Key_Copy",
                "Key_Cut",
                "Key_Display",
                "Key_DOS",
                "Key_Documents",
                "Key_Excel",
                "Key_Explorer",
                "Key_Game",
                "Key_Go",
                "Key_iTouch",
                "Key_LogOff",
                "Key_Market",
                "Key_Meeting",
                "Key_MenuKB",
                "Key_MenuPB",
                "Key_MySites",
                "Key_News",
                "Key_OfficeHome",
                "Key_Option",
                "Key_Paste",
                "Key_Phone",
                "Key_Calendar",
                "Key_Reply",
                "Key_Reload",
                "Key_RotateWindows",
                "Key_RotationPB",
                "Key_RotationKB",
                "Key_Save",
                "Key_Send",
                "Key_Spell",
                "Key_SplitScreen",
                "Key_Support",
                "Key_TaskPane",
                "Key_Terminal",
                "Key_Tools",
                "Key_Travel",
                "Key_Video",
                "Key_Word",
                "Key_Xfer",
                "Key_ZoomIn",
                "Key_ZoomOut",
                "Key_Away",
                "Key_Messenger",
                "Key_WebCam",
                "Key_MailForward",
                "Key_Pictures",
                "Key_Music",
                "Key_Battery",
                "Key_Bluetooth",
                "Key_WLAN",
                "Key_UWB",
                "Key_AudioForward",
                "Key_AudioRepeat",
                "Key_AudioRandomPlay",
                "Key_Subtitle",
                "Key_AudioCycleTrack",
                "Key_Time",
                "Key_Hibernate",
                "Key_View",
                "Key_TopMenu",
                "Key_PowerDown",
                "Key_Suspend",
                "Key_ContrastAdjust",
                "Key_LaunchG",
                "Key_LaunchH",
                "Key_TouchpadToggle",
                "Key_TouchpadOn",
                "Key_TouchpadOff",
                "Key_MicMute",
                "Key_Red",
                "Key_Green",
                "Key_Yellow",
                "Key_Blue",
                "Key_ChannelUp",
                "Key_ChannelDown",
                "Key_Guide",
                "Key_Info",
                "Key_Settings",
                "Key_MicVolumeUp",
                "Key_MicVolumeDown",
                "Key_New",
                "Key_Open",
                "Key_Find",
                "Key_Undo",
                "Key_Redo",
                "Key_MediaLast",
                "Key_Select",
                "Key_Yes",
                "Key_No",
                "Key_Cancel",
                "Key_Printer",
                "Key_Execute",
                "Key_Sleep",
                "Key_Play",
                "Key_Zoom",
                "Key_Exit",
                "Key_Context1",
                "Key_Context2",
                "Key_Context3",
                "Key_Context4",
                "Key_Call",
                "Key_Hangup",
                "Key_Flip",
                "Key_ToggleCallHangup",
                "Key_VoiceDial",
                "Key_LastNumberRedial",
                "Key_Camera",
                "Key_CameraFocus",
                "Key_unknown"
            ]
        }
        Enum {
            name: "KeyboardModifier"
            values: [
                "NoModifier",
                "ShiftModifier",
                "ControlModifier",
                "AltModifier",
                "MetaModifier",
                "KeypadModifier",
                "GroupSwitchModifier",
                "KeyboardModifierMask"
            ]
        }
        Enum {
            name: "KeyboardModifiers"
            alias: "KeyboardModifier"
            isFlag: true
            values: [
                "NoModifier",
                "ShiftModifier",
                "ControlModifier",
                "AltModifier",
                "MetaModifier",
                "KeypadModifier",
                "GroupSwitchModifier",
                "KeyboardModifierMask"
            ]
        }
        Enum {
            name: "Modifier"
            values: ["META", "SHIFT", "CTRL", "ALT", "MODIFIER_MASK"]
        }
        Enum {
            name: "Modifiers"
            alias: "Modifier"
            isFlag: true
            values: ["META", "SHIFT", "CTRL", "ALT", "MODIFIER_MASK"]
        }
        Enum {
            name: "ArrowType"
            values: [
                "NoArrow",
                "UpArrow",
                "DownArrow",
                "LeftArrow",
                "RightArrow"
            ]
        }
        Enum {
            name: "PenStyle"
            values: [
                "NoPen",
                "SolidLine",
                "DashLine",
                "DotLine",
                "DashDotLine",
                "DashDotDotLine",
                "CustomDashLine"
            ]
        }
        Enum {
            name: "PenCapStyle"
            values: ["FlatCap", "SquareCap", "RoundCap", "MPenCapStyle"]
        }
        Enum {
            name: "PenJoinStyle"
            values: [
                "MiterJoin",
                "BevelJoin",
                "RoundJoin",
                "SvgMiterJoin",
                "MPenJoinStyle"
            ]
        }
        Enum {
            name: "BrushStyle"
            values: [
                "NoBrush",
                "SolidPattern",
                "Dense1Pattern",
                "Dense2Pattern",
                "Dense3Pattern",
                "Dense4Pattern",
                "Dense5Pattern",
                "Dense6Pattern",
                "Dense7Pattern",
                "HorPattern",
                "VerPattern",
                "CrossPattern",
                "BDiagPattern",
                "FDiagPattern",
                "DiagCrossPattern",
                "LinearGradientPattern",
                "RadialGradientPattern",
                "ConicalGradientPattern",
                "TexturePattern"
            ]
        }
        Enum {
            name: "SizeMode"
            values: ["AbsoluteSize", "RelativeSize"]
        }
        Enum {
            name: "CursorShape"
            values: [
                "ArrowCursor",
                "UpArrowCursor",
                "CrossCursor",
                "WaitCursor",
                "IBeamCursor",
                "SizeVerCursor",
                "SizeHorCursor",
                "SizeBDiagCursor",
                "SizeFDiagCursor",
                "SizeAllCursor",
                "BlankCursor",
                "SplitVCursor",
                "SplitHCursor",
                "PointingHandCursor",
                "ForbiddenCursor",
                "WhatsThisCursor",
                "BusyCursor",
                "OpenHandCursor",
                "ClosedHandCursor",
                "DragCopyCursor",
                "DragMoveCursor",
                "DragLinkCursor",
                "LastCursor",
                "BitmapCursor",
                "CustomCursor"
            ]
        }
        Enum {
            name: "TextFormat"
            values: ["PlainText", "RichText", "AutoText", "MarkdownText"]
        }
        Enum {
            name: "AspectRatioMode"
            values: [
                "IgnoreAspectRatio",
                "KeepAspectRatio",
                "KeepAspectRatioByExpanding"
            ]
        }
        Enum {
            name: "DockWidgetArea"
            values: [
                "LeftDockWidgetArea",
                "RightDockWidgetArea",
                "TopDockWidgetArea",
                "BottomDockWidgetArea",
                "DockWidgetArea_Mask",
                "AllDockWidgetAreas",
                "NoDockWidgetArea"
            ]
        }
        Enum {
            name: "DockWidgetAreas"
            alias: "DockWidgetArea"
            isFlag: true
            values: [
                "LeftDockWidgetArea",
                "RightDockWidgetArea",
                "TopDockWidgetArea",
                "BottomDockWidgetArea",
                "DockWidgetArea_Mask",
                "AllDockWidgetAreas",
                "NoDockWidgetArea"
            ]
        }
        Enum {
            name: "ToolBarArea"
            values: [
                "LeftToolBarArea",
                "RightToolBarArea",
                "TopToolBarArea",
                "BottomToolBarArea",
                "ToolBarArea_Mask",
                "AllToolBarAreas",
                "NoToolBarArea"
            ]
        }
        Enum {
            name: "ToolBarAreas"
            alias: "ToolBarArea"
            isFlag: true
            values: [
                "LeftToolBarArea",
                "RightToolBarArea",
                "TopToolBarArea",
                "BottomToolBarArea",
                "ToolBarArea_Mask",
                "AllToolBarAreas",
                "NoToolBarArea"
            ]
        }
        Enum {
            name: "DateFormat"
            values: ["TextDate", "ISODate", "RFC2822Date", "ISODateWithMs"]
        }
        Enum {
            name: "TimeSpec"
            values: ["LocalTime", "UTC", "OffsetFromUTC", "TimeZone"]
        }
        Enum {
            name: "DayOfWeek"
            values: [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
            ]
        }
        Enum {
            name: "ScrollBarPolicy"
            values: [
                "ScrollBarAsNeeded",
                "ScrollBarAlwaysOff",
                "ScrollBarAlwaysOn"
            ]
        }
        Enum {
            name: "CaseSensitivity"
            values: ["CaseInsensitive", "CaseSensitive"]
        }
        Enum {
            name: "Corner"
            values: [
                "TopLeftCorner",
                "TopRightCorner",
                "BottomLeftCorner",
                "BottomRightCorner"
            ]
        }
        Enum {
            name: "Edge"
            values: ["TopEdge", "LeftEdge", "RightEdge", "BottomEdge"]
        }
        Enum {
            name: "Edges"
            alias: "Edge"
            isFlag: true
            values: ["TopEdge", "LeftEdge", "RightEdge", "BottomEdge"]
        }
        Enum {
            name: "ConnectionType"
            values: [
                "AutoConnection",
                "DirectConnection",
                "QueuedConnection",
                "BlockingQueuedConnection",
                "UniqueConnection",
                "SingleShotConnection"
            ]
        }
        Enum {
            name: "ShortcutContext"
            values: [
                "WidgetShortcut",
                "WindowShortcut",
                "ApplicationShortcut",
                "WidgetWithChildrenShortcut"
            ]
        }
        Enum {
            name: "FillRule"
            values: ["OddEvenFill", "WindingFill"]
        }
        Enum {
            name: "MaskMode"
            values: ["MaskInColor", "MaskOutColor"]
        }
        Enum {
            name: "ClipOperation"
            values: ["NoClip", "ReplaceClip", "IntersectClip"]
        }
        Enum {
            name: "ItemSelectionMode"
            values: [
                "ContainsItemShape",
                "IntersectsItemShape",
                "ContainsItemBoundingRect",
                "IntersectsItemBoundingRect"
            ]
        }
        Enum {
            name: "ItemSelectionOperation"
            values: ["ReplaceSelection", "AddToSelection"]
        }
        Enum {
            name: "TransformationMode"
            values: ["FastTransformation", "SmoothTransformation"]
        }
        Enum {
            name: "Axis"
            values: ["XAxis", "YAxis", "ZAxis"]
        }
        Enum {
            name: "FocusReason"
            values: [
                "MouseFocusReason",
                "TabFocusReason",
                "BacktabFocusReason",
                "ActiveWindowFocusReason",
                "PopupFocusReason",
                "ShortcutFocusReason",
                "MenuBarFocusReason",
                "OtherFocusReason",
                "NoFocusReason"
            ]
        }
        Enum {
            name: "ContextMenuPolicy"
            values: [
                "NoContextMenu",
                "DefaultContextMenu",
                "ActionsContextMenu",
                "CustomContextMenu",
                "PreventContextMenu"
            ]
        }
        Enum {
            name: "InputMethodQuery"
            values: [
                "ImEnabled",
                "ImCursorRectangle",
                "ImFont",
                "ImCursorPosition",
                "ImSurroundingText",
                "ImCurrentSelection",
                "ImMaximumTextLength",
                "ImAnchorPosition",
                "ImHints",
                "ImPreferredLanguage",
                "ImAbsolutePosition",
                "ImTextBeforeCursor",
                "ImTextAfterCursor",
                "ImEnterKeyType",
                "ImAnchorRectangle",
                "ImInputItemClipRectangle",
                "ImReadOnly",
                "ImPlatformData",
                "ImQueryInput",
                "ImQueryAll"
            ]
        }
        Enum {
            name: "InputMethodQueries"
            alias: "InputMethodQuery"
            isFlag: true
            values: [
                "ImEnabled",
                "ImCursorRectangle",
                "ImFont",
                "ImCursorPosition",
                "ImSurroundingText",
                "ImCurrentSelection",
                "ImMaximumTextLength",
                "ImAnchorPosition",
                "ImHints",
                "ImPreferredLanguage",
                "ImAbsolutePosition",
                "ImTextBeforeCursor",
                "ImTextAfterCursor",
                "ImEnterKeyType",
                "ImAnchorRectangle",
                "ImInputItemClipRectangle",
                "ImReadOnly",
                "ImPlatformData",
                "ImQueryInput",
                "ImQueryAll"
            ]
        }
        Enum {
            name: "InputMethodHint"
            values: [
                "ImhNone",
                "ImhHiddenText",
                "ImhSensitiveData",
                "ImhNoAutoUppercase",
                "ImhPreferNumbers",
                "ImhPreferUppercase",
                "ImhPreferLowercase",
                "ImhNoPredictiveText",
                "ImhDate",
                "ImhTime",
                "ImhPreferLatin",
                "ImhMultiLine",
                "ImhNoEditMenu",
                "ImhNoTextHandles",
                "ImhDigitsOnly",
                "ImhFormattedNumbersOnly",
                "ImhUppercaseOnly",
                "ImhLowercaseOnly",
                "ImhDialableCharactersOnly",
                "ImhEmailCharactersOnly",
                "ImhUrlCharactersOnly",
                "ImhLatinOnly",
                "ImhExclusiveInputMask"
            ]
        }
        Enum {
            name: "InputMethodHints"
            alias: "InputMethodHint"
            isFlag: true
            values: [
                "ImhNone",
                "ImhHiddenText",
                "ImhSensitiveData",
                "ImhNoAutoUppercase",
                "ImhPreferNumbers",
                "ImhPreferUppercase",
                "ImhPreferLowercase",
                "ImhNoPredictiveText",
                "ImhDate",
                "ImhTime",
                "ImhPreferLatin",
                "ImhMultiLine",
                "ImhNoEditMenu",
                "ImhNoTextHandles",
                "ImhDigitsOnly",
                "ImhFormattedNumbersOnly",
                "ImhUppercaseOnly",
                "ImhLowercaseOnly",
                "ImhDialableCharactersOnly",
                "ImhEmailCharactersOnly",
                "ImhUrlCharactersOnly",
                "ImhLatinOnly",
                "ImhExclusiveInputMask"
            ]
        }
        Enum {
            name: "EnterKeyType"
            values: [
                "EnterKeyDefault",
                "EnterKeyReturn",
                "EnterKeyDone",
                "EnterKeyGo",
                "EnterKeySend",
                "EnterKeySearch",
                "EnterKeyNext",
                "EnterKeyPrevious"
            ]
        }
        Enum {
            name: "ToolButtonStyle"
            values: [
                "ToolButtonIconOnly",
                "ToolButtonTextOnly",
                "ToolButtonTextBesideIcon",
                "ToolButtonTextUnderIcon",
                "ToolButtonFollowStyle"
            ]
        }
        Enum {
            name: "LayoutDirection"
            values: ["LeftToRight", "RightToLeft", "LayoutDirectionAuto"]
        }
        Enum {
            name: "DropAction"
            values: [
                "CopyAction",
                "MoveAction",
                "LinkAction",
                "ActionMask",
                "TargetMoveAction",
                "IgnoreAction"
            ]
        }
        Enum {
            name: "DropActions"
            alias: "DropAction"
            isFlag: true
            values: [
                "CopyAction",
                "MoveAction",
                "LinkAction",
                "ActionMask",
                "TargetMoveAction",
                "IgnoreAction"
            ]
        }
        Enum {
            name: "CheckState"
            values: ["Unchecked", "PartiallyChecked", "Checked"]
        }
        Enum {
            name: "ItemDataRole"
            values: [
                "DisplayRole",
                "DecorationRole",
                "EditRole",
                "ToolTipRole",
                "StatusTipRole",
                "WhatsThisRole",
                "FontRole",
                "TextAlignmentRole",
                "BackgroundRole",
                "ForegroundRole",
                "CheckStateRole",
                "AccessibleTextRole",
                "AccessibleDescriptionRole",
                "SizeHintRole",
                "InitialSortOrderRole",
                "DisplayPropertyRole",
                "DecorationPropertyRole",
                "ToolTipPropertyRole",
                "StatusTipPropertyRole",
                "WhatsThisPropertyRole",
                "UserRole"
            ]
        }
        Enum {
            name: "ItemFlags"
            alias: "ItemFlag"
            isFlag: true
            values: [
                "NoItemFlags",
                "ItemIsSelectable",
                "ItemIsEditable",
                "ItemIsDragEnabled",
                "ItemIsDropEnabled",
                "ItemIsUserCheckable",
                "ItemIsEnabled",
                "ItemIsAutoTristate",
                "ItemNeverHasChildren",
                "ItemIsUserTristate"
            ]
        }
        Enum {
            name: "MatchFlags"
            alias: "MatchFlag"
            isFlag: true
            values: [
                "MatchExactly",
                "MatchContains",
                "MatchStartsWith",
                "MatchEndsWith",
                "MatchRegularExpression",
                "MatchWildcard",
                "MatchFixedString",
                "MatchTypeMask",
                "MatchCaseSensitive",
                "MatchWrap",
                "MatchRecursive"
            ]
        }
        Enum {
            name: "WindowModality"
            values: ["NonModal", "WindowModal", "ApplicationModal"]
        }
        Enum {
            name: "TextInteractionFlag"
            values: [
                "NoTextInteraction",
                "TextSelectableByMouse",
                "TextSelectableByKeyboard",
                "LinksAccessibleByMouse",
                "LinksAccessibleByKeyboard",
                "TextEditable",
                "TextEditorInteraction",
                "TextBrowserInteraction"
            ]
        }
        Enum {
            name: "TextInteractionFlags"
            alias: "TextInteractionFlag"
            isFlag: true
            values: [
                "NoTextInteraction",
                "TextSelectableByMouse",
                "TextSelectableByKeyboard",
                "LinksAccessibleByMouse",
                "LinksAccessibleByKeyboard",
                "TextEditable",
                "TextEditorInteraction",
                "TextBrowserInteraction"
            ]
        }
        Enum {
            name: "SizeHint"
            values: [
                "MinimumSize",
                "PreferredSize",
                "MaximumSize",
                "MinimumDescent",
                "NSizeHints"
            ]
        }
        Enum {
            name: "TouchPointStates"
            alias: "TouchPointState"
            isFlag: true
            values: [
                "TouchPointUnknownState",
                "TouchPointPressed",
                "TouchPointMoved",
                "TouchPointStationary",
                "TouchPointReleased"
            ]
        }
        Enum {
            name: "GestureState"
            values: [
                "NoGesture",
                "GestureStarted",
                "GestureUpdated",
                "GestureFinished",
                "GestureCanceled"
            ]
        }
        Enum {
            name: "GestureType"
            values: [
                "TapGesture",
                "TapAndHoldGesture",
                "PanGesture",
                "PinchGesture",
                "SwipeGesture",
                "CustomGesture",
                "LastGestureType"
            ]
        }
        Enum {
            name: "NativeGestureType"
            values: [
                "BeginNativeGesture",
                "EndNativeGesture",
                "PanNativeGesture",
                "ZoomNativeGesture",
                "SmartZoomNativeGesture",
                "RotateNativeGesture",
                "SwipeNativeGesture"
            ]
        }
        Enum {
            name: "CursorMoveStyle"
            values: ["LogicalMoveStyle", "VisualMoveStyle"]
        }
        Enum {
            name: "TimerType"
            values: ["PreciseTimer", "CoarseTimer", "VeryCoarseTimer"]
        }
        Enum {
            name: "ScrollPhase"
            values: [
                "NoScrollPhase",
                "ScrollBegin",
                "ScrollUpdate",
                "ScrollEnd",
                "ScrollMomentum"
            ]
        }
        Enum {
            name: "MouseEventSource"
            values: [
                "MouseEventNotSynthesized",
                "MouseEventSynthesizedBySystem",
                "MouseEventSynthesizedByQt",
                "MouseEventSynthesizedByApplication"
            ]
        }
        Enum {
            name: "MouseEventFlags"
            alias: "MouseEventFlag"
            isFlag: true
            values: [
                "NoMouseEventFlag",
                "MouseEventCreatedDoubleClick",
                "MouseEventFlagMask"
            ]
        }
        Enum {
            name: "ChecksumType"
            values: ["ChecksumIso3309", "ChecksumItuV41"]
        }
        Enum {
            name: "HighDpiScaleFactorRoundingPolicy"
            values: [
                "Unset",
                "Round",
                "Ceil",
                "Floor",
                "RoundPreferFloor",
                "PassThrough"
            ]
        }
    }
    Component {
        file: "private/qqmlbuiltinfunctions_p.h"
        name: "QtObject"
        accessSemantics: "reference"
        prototype: "QObject"
        extension: "Qt"
        exports: ["QtQml/Qt 2.0", "QtQml/Qt 6.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [512, 1536]
        Enum {
            name: "LoadingMode"
            values: ["Asynchronous", "Synchronous"]
        }
        Property {
            name: "application"
            type: "QQmlApplication"
            isPointer: true
            read: "application"
            index: 0
            isReadonly: true
        }
        Property {
            name: "platform"
            type: "QQmlPlatform"
            isPointer: true
            read: "platform"
            index: 1
            isReadonly: true
        }
        Property {
            name: "inputMethod"
            type: "QObject"
            isPointer: true
            read: "inputMethod"
            index: 2
            isReadonly: true
        }
        Property {
            name: "styleHints"
            type: "QObject"
            isPointer: true
            read: "styleHints"
            index: 3
            isReadonly: true
        }
        Property { name: "callLater"; type: "QJSValue"; read: "callLater"; index: 4; isReadonly: true }
        Property {
            name: "uiLanguage"
            type: "QString"
            bindable: "uiLanguageBindable"
            read: "uiLanguage"
            write: "setUiLanguage"
            index: 5
        }
        Method {
            name: "include"
            type: "QJSValue"
            Parameter { name: "url"; type: "QString" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "include"
            type: "QJSValue"
            Parameter { name: "url"; type: "QString" }
        }
        Method {
            name: "isQtObject"
            type: "bool"
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method {
            name: "color"
            type: "QVariant"
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "rgba"
            type: "QVariant"
            Parameter { name: "r"; type: "double" }
            Parameter { name: "g"; type: "double" }
            Parameter { name: "b"; type: "double" }
            Parameter { name: "a"; type: "double" }
        }
        Method {
            name: "rgba"
            type: "QVariant"
            Parameter { name: "r"; type: "double" }
            Parameter { name: "g"; type: "double" }
            Parameter { name: "b"; type: "double" }
        }
        Method {
            name: "hsla"
            type: "QVariant"
            Parameter { name: "h"; type: "double" }
            Parameter { name: "s"; type: "double" }
            Parameter { name: "l"; type: "double" }
            Parameter { name: "a"; type: "double" }
        }
        Method {
            name: "hsla"
            type: "QVariant"
            Parameter { name: "h"; type: "double" }
            Parameter { name: "s"; type: "double" }
            Parameter { name: "l"; type: "double" }
        }
        Method {
            name: "hsva"
            type: "QVariant"
            Parameter { name: "h"; type: "double" }
            Parameter { name: "s"; type: "double" }
            Parameter { name: "v"; type: "double" }
            Parameter { name: "a"; type: "double" }
        }
        Method {
            name: "hsva"
            type: "QVariant"
            Parameter { name: "h"; type: "double" }
            Parameter { name: "s"; type: "double" }
            Parameter { name: "v"; type: "double" }
        }
        Method {
            name: "colorEqual"
            type: "bool"
            Parameter { name: "lhs"; type: "QVariant" }
            Parameter { name: "rhs"; type: "QVariant" }
        }
        Method {
            name: "rect"
            type: "QRectF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "width"; type: "double" }
            Parameter { name: "height"; type: "double" }
        }
        Method {
            name: "point"
            type: "QPointF"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "size"
            type: "QSizeF"
            Parameter { name: "width"; type: "double" }
            Parameter { name: "height"; type: "double" }
        }
        Method {
            name: "vector2d"
            type: "QVariant"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "vector3d"
            type: "QVariant"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
        }
        Method {
            name: "vector4d"
            type: "QVariant"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
            Parameter { name: "w"; type: "double" }
        }
        Method {
            name: "quaternion"
            type: "QVariant"
            Parameter { name: "scalar"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
        }
        Method { name: "matrix4x4"; type: "QVariant" }
        Method {
            name: "matrix4x4"
            type: "QVariant"
            Parameter { name: "m11"; type: "double" }
            Parameter { name: "m12"; type: "double" }
            Parameter { name: "m13"; type: "double" }
            Parameter { name: "m14"; type: "double" }
            Parameter { name: "m21"; type: "double" }
            Parameter { name: "m22"; type: "double" }
            Parameter { name: "m23"; type: "double" }
            Parameter { name: "m24"; type: "double" }
            Parameter { name: "m31"; type: "double" }
            Parameter { name: "m32"; type: "double" }
            Parameter { name: "m33"; type: "double" }
            Parameter { name: "m34"; type: "double" }
            Parameter { name: "m41"; type: "double" }
            Parameter { name: "m42"; type: "double" }
            Parameter { name: "m43"; type: "double" }
            Parameter { name: "m44"; type: "double" }
        }
        Method {
            name: "matrix4x4"
            type: "QVariant"
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method {
            name: "lighter"
            type: "QVariant"
            Parameter { name: "color"; type: "QJSValue" }
            Parameter { name: "factor"; type: "double" }
        }
        Method {
            name: "lighter"
            type: "QVariant"
            Parameter { name: "color"; type: "QJSValue" }
        }
        Method {
            name: "darker"
            type: "QVariant"
            Parameter { name: "color"; type: "QJSValue" }
            Parameter { name: "factor"; type: "double" }
        }
        Method {
            name: "darker"
            type: "QVariant"
            Parameter { name: "color"; type: "QJSValue" }
        }
        Method {
            name: "alpha"
            type: "QVariant"
            Parameter { name: "baseColor"; type: "QJSValue" }
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "tint"
            type: "QVariant"
            Parameter { name: "baseColor"; type: "QJSValue" }
            Parameter { name: "tintColor"; type: "QJSValue" }
        }
        Method {
            name: "formatDate"
            type: "QString"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "format"; type: "QString" }
        }
        Method {
            name: "formatDate"
            type: "QString"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "format"; type: "Qt::DateFormat" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QTime" }
            Parameter { name: "format"; type: "QString" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QString" }
            Parameter { name: "format"; type: "QString" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QTime" }
            Parameter { name: "format"; type: "Qt::DateFormat" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QString" }
            Parameter { name: "format"; type: "Qt::DateFormat" }
        }
        Method {
            name: "formatDateTime"
            type: "QString"
            Parameter { name: "date"; type: "QDateTime" }
            Parameter { name: "format"; type: "QString" }
        }
        Method {
            name: "formatDateTime"
            type: "QString"
            Parameter { name: "date"; type: "QDateTime" }
            Parameter { name: "format"; type: "Qt::DateFormat" }
        }
        Method {
            name: "formatDate"
            type: "QString"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "locale"; type: "QLocale" }
            Parameter { name: "formatType"; type: "QLocale::FormatType" }
        }
        Method {
            name: "formatDate"
            type: "QString"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "locale"; type: "QLocale" }
        }
        Method {
            name: "formatDate"
            type: "QString"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QTime" }
            Parameter { name: "locale"; type: "QLocale" }
            Parameter { name: "formatType"; type: "QLocale::FormatType" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QTime" }
            Parameter { name: "locale"; type: "QLocale" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QTime" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QString" }
            Parameter { name: "locale"; type: "QLocale" }
            Parameter { name: "formatType"; type: "QLocale::FormatType" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QString" }
            Parameter { name: "locale"; type: "QLocale" }
        }
        Method {
            name: "formatTime"
            type: "QString"
            Parameter { name: "time"; type: "QString" }
        }
        Method {
            name: "formatDateTime"
            type: "QString"
            Parameter { name: "date"; type: "QDateTime" }
            Parameter { name: "locale"; type: "QLocale" }
            Parameter { name: "formatType"; type: "QLocale::FormatType" }
        }
        Method {
            name: "formatDateTime"
            type: "QString"
            Parameter { name: "date"; type: "QDateTime" }
            Parameter { name: "locale"; type: "QLocale" }
        }
        Method {
            name: "formatDateTime"
            type: "QString"
            Parameter { name: "date"; type: "QDateTime" }
        }
        Method { name: "locale"; type: "QLocale" }
        Method {
            name: "locale"
            type: "QLocale"
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "url"
            type: "QUrl"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "resolvedUrl"
            type: "QUrl"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "resolvedUrl"
            type: "QUrl"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "context"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "openUrlExternally"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "font"
            type: "QVariant"
            Parameter { name: "fontSpecifier"; type: "QJSValue" }
        }
        Method { name: "fontFamilies"; type: "QStringList" }
        Method {
            name: "md5"
            type: "QString"
            Parameter { name: "data"; type: "QString" }
        }
        Method {
            name: "btoa"
            type: "QString"
            Parameter { name: "data"; type: "QString" }
        }
        Method {
            name: "atob"
            type: "QString"
            Parameter { name: "data"; type: "QString" }
        }
        Method { name: "quit" }
        Method {
            name: "exit"
            Parameter { name: "retCode"; type: "int" }
        }
        Method {
            name: "createQmlObject"
            type: "QObject"
            isPointer: true
            Parameter { name: "qml"; type: "QString" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "createQmlObject"
            type: "QObject"
            isPointer: true
            Parameter { name: "qml"; type: "QString" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent"
            isPointer: true
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent"
            isPointer: true
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "mode"; type: "QQmlComponent::CompilationMode" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent"
            isPointer: true
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "mode"; type: "QQmlComponent::CompilationMode" }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent"
            isPointer: true
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "binding"
            type: "QJSValue"
            Parameter { name: "function"; type: "QJSValue" }
        }
    }
}
