import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QAudioDevice"
        accessSemantics: "value"
        exports: ["QtMultimedia/audioDevice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Mode"
            values: ["Null", "Input", "Output"]
        }
        Property { name: "id"; type: "QByteArray"; read: "id"; index: 0; isReadonly: true }
        Property { name: "description"; type: "QString"; read: "description"; index: 1; isReadonly: true }
        Property { name: "isDefault"; type: "bool"; read: "isDefault"; index: 2; isReadonly: true }
        Property { name: "mode"; type: "Mode"; read: "mode"; index: 3; isReadonly: true }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QAudioDevice"
        accessSemantics: "value"
        exports: ["QtMultimedia/AudioDevice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Mode"
            values: ["Null", "Input", "Output"]
        }
        Property { name: "id"; type: "QByteArray"; read: "id"; index: 0; isReadonly: true }
        Property { name: "description"; type: "QString"; read: "description"; index: 1; isReadonly: true }
        Property { name: "isDefault"; type: "bool"; read: "isDefault"; index: 2; isReadonly: true }
        Property { name: "mode"; type: "Mode"; read: "mode"; index: 3; isReadonly: true }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QAudioInput"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/AudioInput 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "device"
            type: "QAudioDevice"
            read: "device"
            write: "setDevice"
            notify: "deviceChanged"
            index: 0
        }
        Property {
            name: "volume"
            type: "float"
            read: "volume"
            write: "setVolume"
            notify: "volumeChanged"
            index: 1
        }
        Property {
            name: "muted"
            type: "bool"
            read: "isMuted"
            write: "setMuted"
            notify: "mutedChanged"
            index: 2
        }
        Signal { name: "deviceChanged" }
        Signal {
            name: "volumeChanged"
            Parameter { name: "volume"; type: "float" }
        }
        Signal {
            name: "mutedChanged"
            Parameter { name: "muted"; type: "bool" }
        }
        Method {
            name: "setDevice"
            Parameter { name: "device"; type: "QAudioDevice" }
        }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "float" }
        }
        Method {
            name: "setMuted"
            Parameter { name: "muted"; type: "bool" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QAudioOutput"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/AudioOutput 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "device"
            type: "QAudioDevice"
            read: "device"
            write: "setDevice"
            notify: "deviceChanged"
            index: 0
        }
        Property {
            name: "volume"
            type: "float"
            read: "volume"
            write: "setVolume"
            notify: "volumeChanged"
            index: 1
        }
        Property {
            name: "muted"
            type: "bool"
            read: "isMuted"
            write: "setMuted"
            notify: "mutedChanged"
            index: 2
        }
        Signal { name: "deviceChanged" }
        Signal {
            name: "volumeChanged"
            Parameter { name: "volume"; type: "float" }
        }
        Signal {
            name: "mutedChanged"
            Parameter { name: "muted"; type: "bool" }
        }
        Method {
            name: "setDevice"
            Parameter { name: "device"; type: "QAudioDevice" }
        }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "float" }
        }
        Method {
            name: "setMuted"
            Parameter { name: "muted"; type: "bool" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QCameraDevice"
        accessSemantics: "value"
        exports: ["QtMultimedia/cameraDevice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Position"
            values: ["UnspecifiedPosition", "BackFace", "FrontFace"]
        }
        Property { name: "id"; type: "QByteArray"; read: "id"; index: 0; isReadonly: true }
        Property { name: "description"; type: "QString"; read: "description"; index: 1; isReadonly: true }
        Property { name: "isDefault"; type: "bool"; read: "isDefault"; index: 2; isReadonly: true }
        Property { name: "position"; type: "Position"; read: "position"; index: 3; isReadonly: true }
        Property {
            name: "videoFormats"
            type: "QList<QCameraFormat>"
            read: "videoFormats"
            index: 4
            isReadonly: true
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QCameraDevice"
        accessSemantics: "value"
        exports: ["QtMultimedia/CameraDevice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Position"
            values: ["UnspecifiedPosition", "BackFace", "FrontFace"]
        }
        Property { name: "id"; type: "QByteArray"; read: "id"; index: 0; isReadonly: true }
        Property { name: "description"; type: "QString"; read: "description"; index: 1; isReadonly: true }
        Property { name: "isDefault"; type: "bool"; read: "isDefault"; index: 2; isReadonly: true }
        Property { name: "position"; type: "Position"; read: "position"; index: 3; isReadonly: true }
        Property {
            name: "videoFormats"
            type: "QList<QCameraFormat>"
            read: "videoFormats"
            index: 4
            isReadonly: true
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QCamera"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/Camera 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Error"
            values: ["NoError", "CameraError"]
        }
        Enum {
            name: "FocusMode"
            values: [
                "FocusModeAuto",
                "FocusModeAutoNear",
                "FocusModeAutoFar",
                "FocusModeHyperfocal",
                "FocusModeInfinity",
                "FocusModeManual"
            ]
        }
        Enum {
            name: "FlashMode"
            values: ["FlashOff", "FlashOn", "FlashAuto"]
        }
        Enum {
            name: "TorchMode"
            values: ["TorchOff", "TorchOn", "TorchAuto"]
        }
        Enum {
            name: "ExposureMode"
            values: [
                "ExposureAuto",
                "ExposureManual",
                "ExposurePortrait",
                "ExposureNight",
                "ExposureSports",
                "ExposureSnow",
                "ExposureBeach",
                "ExposureAction",
                "ExposureLandscape",
                "ExposureNightPortrait",
                "ExposureTheatre",
                "ExposureSunset",
                "ExposureSteadyPhoto",
                "ExposureFireworks",
                "ExposureParty",
                "ExposureCandlelight",
                "ExposureBarcode"
            ]
        }
        Enum {
            name: "WhiteBalanceMode"
            values: [
                "WhiteBalanceAuto",
                "WhiteBalanceManual",
                "WhiteBalanceSunlight",
                "WhiteBalanceCloudy",
                "WhiteBalanceShade",
                "WhiteBalanceTungsten",
                "WhiteBalanceFluorescent",
                "WhiteBalanceFlash",
                "WhiteBalanceSunset"
            ]
        }
        Property {
            name: "active"
            type: "bool"
            read: "isActive"
            write: "setActive"
            notify: "activeChanged"
            index: 0
        }
        Property {
            name: "cameraDevice"
            type: "QCameraDevice"
            read: "cameraDevice"
            write: "setCameraDevice"
            notify: "cameraDeviceChanged"
            index: 1
        }
        Property {
            name: "error"
            type: "Error"
            read: "error"
            notify: "errorChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "errorString"
            type: "QString"
            read: "errorString"
            notify: "errorChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "cameraFormat"
            type: "QCameraFormat"
            read: "cameraFormat"
            write: "setCameraFormat"
            notify: "cameraFormatChanged"
            index: 4
        }
        Property {
            name: "focusMode"
            type: "FocusMode"
            read: "focusMode"
            write: "setFocusMode"
            index: 5
        }
        Property {
            name: "focusPoint"
            type: "QPointF"
            read: "focusPoint"
            notify: "focusPointChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "customFocusPoint"
            type: "QPointF"
            read: "customFocusPoint"
            write: "setCustomFocusPoint"
            notify: "customFocusPointChanged"
            index: 7
        }
        Property {
            name: "focusDistance"
            type: "float"
            read: "focusDistance"
            write: "setFocusDistance"
            notify: "focusDistanceChanged"
            index: 8
        }
        Property {
            name: "minimumZoomFactor"
            type: "float"
            read: "minimumZoomFactor"
            notify: "minimumZoomFactorChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "maximumZoomFactor"
            type: "float"
            read: "maximumZoomFactor"
            notify: "maximumZoomFactorChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "zoomFactor"
            type: "float"
            read: "zoomFactor"
            write: "setZoomFactor"
            notify: "zoomFactorChanged"
            index: 11
        }
        Property {
            name: "exposureTime"
            type: "float"
            read: "exposureTime"
            notify: "exposureTimeChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "manualExposureTime"
            type: "int"
            read: "manualExposureTime"
            write: "setManualExposureTime"
            notify: "manualExposureTimeChanged"
            index: 13
        }
        Property {
            name: "isoSensitivity"
            type: "int"
            read: "isoSensitivity"
            notify: "isoSensitivityChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "manualIsoSensitivity"
            type: "int"
            read: "manualIsoSensitivity"
            write: "setManualIsoSensitivity"
            notify: "manualIsoSensitivityChanged"
            index: 15
        }
        Property {
            name: "exposureCompensation"
            type: "float"
            read: "exposureCompensation"
            write: "setExposureCompensation"
            notify: "exposureCompensationChanged"
            index: 16
        }
        Property {
            name: "exposureMode"
            type: "QCamera::ExposureMode"
            read: "exposureMode"
            write: "setExposureMode"
            notify: "exposureModeChanged"
            index: 17
        }
        Property {
            name: "flashReady"
            type: "bool"
            read: "isFlashReady"
            notify: "flashReady"
            index: 18
            isReadonly: true
        }
        Property {
            name: "flashMode"
            type: "QCamera::FlashMode"
            read: "flashMode"
            write: "setFlashMode"
            notify: "flashModeChanged"
            index: 19
        }
        Property {
            name: "torchMode"
            type: "QCamera::TorchMode"
            read: "torchMode"
            write: "setTorchMode"
            notify: "torchModeChanged"
            index: 20
        }
        Property {
            name: "whiteBalanceMode"
            type: "WhiteBalanceMode"
            read: "whiteBalanceMode"
            write: "setWhiteBalanceMode"
            notify: "whiteBalanceModeChanged"
            index: 21
        }
        Property {
            name: "colorTemperature"
            type: "int"
            read: "colorTemperature"
            write: "setColorTemperature"
            notify: "colorTemperatureChanged"
            index: 22
        }
        Property {
            name: "supportedFeatures"
            type: "Features"
            read: "supportedFeatures"
            notify: "supportedFeaturesChanged"
            index: 23
            isReadonly: true
        }
        Signal {
            name: "activeChanged"
            Parameter { type: "bool" }
        }
        Signal { name: "errorChanged" }
        Signal {
            name: "errorOccurred"
            Parameter { name: "error"; type: "QCamera::Error" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Signal { name: "cameraDeviceChanged" }
        Signal { name: "cameraFormatChanged" }
        Signal { name: "supportedFeaturesChanged" }
        Signal { name: "focusModeChanged" }
        Signal {
            name: "zoomFactorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "minimumZoomFactorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "maximumZoomFactorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "focusDistanceChanged"
            Parameter { type: "float" }
        }
        Signal { name: "focusPointChanged" }
        Signal { name: "customFocusPointChanged" }
        Signal {
            name: "flashReady"
            Parameter { type: "bool" }
        }
        Signal { name: "flashModeChanged" }
        Signal { name: "torchModeChanged" }
        Signal {
            name: "exposureTimeChanged"
            Parameter { name: "speed"; type: "float" }
        }
        Signal {
            name: "manualExposureTimeChanged"
            Parameter { name: "speed"; type: "float" }
        }
        Signal {
            name: "isoSensitivityChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "manualIsoSensitivityChanged"
            Parameter { type: "int" }
        }
        Signal {
            name: "exposureCompensationChanged"
            Parameter { type: "float" }
        }
        Signal { name: "exposureModeChanged" }
        Signal { name: "whiteBalanceModeChanged" }
        Signal { name: "colorTemperatureChanged" }
        Signal { name: "brightnessChanged" }
        Signal { name: "contrastChanged" }
        Signal { name: "saturationChanged" }
        Signal { name: "hueChanged" }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "bool" }
        }
        Method { name: "start" }
        Method { name: "stop" }
        Method {
            name: "zoomTo"
            Parameter { name: "zoom"; type: "float" }
            Parameter { name: "rate"; type: "float" }
        }
        Method {
            name: "setFlashMode"
            Parameter { name: "mode"; type: "FlashMode" }
        }
        Method {
            name: "setTorchMode"
            Parameter { name: "mode"; type: "TorchMode" }
        }
        Method {
            name: "setExposureMode"
            Parameter { name: "mode"; type: "ExposureMode" }
        }
        Method {
            name: "setExposureCompensation"
            Parameter { name: "ev"; type: "float" }
        }
        Method {
            name: "setManualIsoSensitivity"
            Parameter { name: "iso"; type: "int" }
        }
        Method { name: "setAutoIsoSensitivity" }
        Method {
            name: "setManualExposureTime"
            Parameter { name: "seconds"; type: "float" }
        }
        Method { name: "setAutoExposureTime" }
        Method {
            name: "setWhiteBalanceMode"
            Parameter { name: "mode"; type: "WhiteBalanceMode" }
        }
        Method {
            name: "setColorTemperature"
            Parameter { name: "colorTemperature"; type: "int" }
        }
        Method {
            name: "_q_error"
            Parameter { type: "int" }
            Parameter { type: "QString" }
        }
        Method {
            name: "isFocusModeSupported"
            type: "bool"
            Parameter { name: "mode"; type: "FocusMode" }
        }
        Method {
            name: "isFlashModeSupported"
            type: "bool"
            Parameter { name: "mode"; type: "FlashMode" }
        }
        Method { name: "isFlashReady"; type: "bool" }
        Method {
            name: "isTorchModeSupported"
            type: "bool"
            Parameter { name: "mode"; type: "TorchMode" }
        }
        Method {
            name: "isExposureModeSupported"
            type: "bool"
            Parameter { name: "mode"; type: "ExposureMode" }
        }
        Method {
            name: "isWhiteBalanceModeSupported"
            type: "bool"
            Parameter { name: "mode"; type: "WhiteBalanceMode" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QCameraFormat"
        accessSemantics: "value"
        exports: ["QtMultimedia/cameraFormat 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Property { name: "resolution"; type: "QSize"; read: "resolution"; index: 0; isReadonly: true }
        Property {
            name: "pixelFormat"
            type: "QVideoFrameFormat::PixelFormat"
            read: "pixelFormat"
            index: 1
            isReadonly: true
        }
        Property { name: "minFrameRate"; type: "float"; read: "minFrameRate"; index: 2; isReadonly: true }
        Property { name: "maxFrameRate"; type: "float"; read: "maxFrameRate"; index: 3; isReadonly: true }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QImageCapture"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/ImageCapture 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Error"
            values: [
                "NoError",
                "NotReadyError",
                "ResourceError",
                "OutOfSpaceError",
                "NotSupportedFeatureError",
                "FormatError"
            ]
        }
        Enum {
            name: "Quality"
            values: [
                "VeryLowQuality",
                "LowQuality",
                "NormalQuality",
                "HighQuality",
                "VeryHighQuality"
            ]
        }
        Enum {
            name: "FileFormat"
            values: [
                "UnspecifiedFormat",
                "JPEG",
                "PNG",
                "WebP",
                "Tiff",
                "LastFileFormat"
            ]
        }
        Property {
            name: "readyForCapture"
            type: "bool"
            read: "isReadyForCapture"
            notify: "readyForCaptureChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "metaData"
            type: "QMediaMetaData"
            read: "metaData"
            write: "setMetaData"
            notify: "metaDataChanged"
            index: 1
        }
        Property {
            name: "error"
            type: "Error"
            read: "error"
            notify: "errorChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "errorString"
            type: "QString"
            read: "errorString"
            notify: "errorChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "fileFormat"
            type: "FileFormat"
            read: "fileFormat"
            notify: "fileFormatChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "quality"
            type: "Quality"
            read: "quality"
            notify: "qualityChanged"
            index: 5
            isReadonly: true
        }
        Signal { name: "errorChanged" }
        Signal {
            name: "errorOccurred"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "error"; type: "QImageCapture::Error" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Signal {
            name: "readyForCaptureChanged"
            Parameter { name: "ready"; type: "bool" }
        }
        Signal { name: "metaDataChanged" }
        Signal { name: "fileFormatChanged" }
        Signal { name: "qualityChanged" }
        Signal { name: "resolutionChanged" }
        Signal {
            name: "imageExposed"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "imageCaptured"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "preview"; type: "QImage" }
        }
        Signal {
            name: "imageMetadataAvailable"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "metaData"; type: "QMediaMetaData" }
        }
        Signal {
            name: "imageAvailable"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "frame"; type: "QVideoFrame" }
        }
        Signal {
            name: "imageSaved"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "fileName"; type: "QString" }
        }
        Method {
            name: "captureToFile"
            type: "int"
            Parameter { name: "location"; type: "QString" }
        }
        Method { name: "captureToFile"; type: "int" }
        Method { name: "capture"; type: "int" }
        Method {
            name: "_q_error"
            Parameter { type: "int" }
            Parameter { type: "int" }
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaCaptureSession"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/CaptureSession 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "audioInput"
            type: "QAudioInput"
            isPointer: true
            read: "audioInput"
            write: "setAudioInput"
            notify: "audioInputChanged"
            index: 0
        }
        Property {
            name: "audioOutput"
            type: "QAudioOutput"
            isPointer: true
            read: "audioOutput"
            write: "setAudioOutput"
            notify: "audioOutputChanged"
            index: 1
        }
        Property {
            name: "camera"
            type: "QCamera"
            isPointer: true
            read: "camera"
            write: "setCamera"
            notify: "cameraChanged"
            index: 2
        }
        Property {
            name: "imageCapture"
            type: "QImageCapture"
            isPointer: true
            read: "imageCapture"
            write: "setImageCapture"
            notify: "imageCaptureChanged"
            index: 3
        }
        Property {
            name: "recorder"
            type: "QMediaRecorder"
            isPointer: true
            read: "recorder"
            write: "setRecorder"
            notify: "recorderChanged"
            index: 4
        }
        Property {
            name: "videoOutput"
            type: "QObject"
            isPointer: true
            read: "videoOutput"
            write: "setVideoOutput"
            notify: "videoOutputChanged"
            index: 5
        }
        Signal { name: "audioInputChanged" }
        Signal { name: "cameraChanged" }
        Signal { name: "imageCaptureChanged" }
        Signal { name: "recorderChanged" }
        Signal { name: "videoOutputChanged" }
        Signal { name: "audioOutputChanged" }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaDevices"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/MediaDevices 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "audioInputs"
            type: "QList<QAudioDevice>"
            read: "audioInputs"
            notify: "audioInputsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "audioOutputs"
            type: "QList<QAudioDevice>"
            read: "audioOutputs"
            notify: "audioOutputsChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "videoInputs"
            type: "QList<QCameraDevice>"
            read: "videoInputs"
            notify: "videoInputsChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "defaultAudioInput"
            type: "QAudioDevice"
            read: "defaultAudioInput"
            notify: "audioInputsChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "defaultAudioOutput"
            type: "QAudioDevice"
            read: "defaultAudioOutput"
            notify: "audioOutputsChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "defaultVideoInput"
            type: "QCameraDevice"
            read: "defaultVideoInput"
            notify: "videoInputsChanged"
            index: 5
            isReadonly: true
        }
        Signal { name: "audioInputsChanged" }
        Signal { name: "audioOutputsChanged" }
        Signal { name: "videoInputsChanged" }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaFormat"
        accessSemantics: "value"
        exports: ["QtMultimedia/mediaFormat 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "FileFormat"
            values: [
                "UnspecifiedFormat",
                "WMV",
                "AVI",
                "Matroska",
                "MPEG4",
                "Ogg",
                "QuickTime",
                "WebM",
                "Mpeg4Audio",
                "AAC",
                "WMA",
                "MP3",
                "FLAC",
                "Wave",
                "LastFileFormat"
            ]
        }
        Enum {
            name: "AudioCodec"
            values: [
                "Unspecified",
                "MP3",
                "AAC",
                "AC3",
                "EAC3",
                "FLAC",
                "DolbyTrueHD",
                "Opus",
                "Vorbis",
                "Wave",
                "WMA",
                "ALAC",
                "LastAudioCodec"
            ]
        }
        Enum {
            name: "VideoCodec"
            values: [
                "Unspecified",
                "MPEG1",
                "MPEG2",
                "MPEG4",
                "H264",
                "H265",
                "VP8",
                "VP9",
                "AV1",
                "Theora",
                "WMV",
                "MotionJPEG",
                "LastVideoCodec"
            ]
        }
        Enum {
            name: "ConversionMode"
            values: ["Encode", "Decode"]
        }
        Property {
            name: "fileFormat"
            type: "FileFormat"
            read: "fileFormat"
            write: "setFileFormat"
            index: 0
        }
        Property {
            name: "audioCodec"
            type: "AudioCodec"
            read: "audioCodec"
            write: "setAudioCodec"
            index: 1
        }
        Property {
            name: "videoCodec"
            type: "VideoCodec"
            read: "videoCodec"
            write: "setVideoCodec"
            index: 2
        }
        Method {
            name: "isSupported"
            type: "bool"
            Parameter { name: "mode"; type: "ConversionMode" }
        }
        Method {
            name: "supportedFileFormats"
            type: "QList<FileFormat>"
            Parameter { name: "m"; type: "ConversionMode" }
        }
        Method {
            name: "supportedVideoCodecs"
            type: "QList<VideoCodec>"
            Parameter { name: "m"; type: "ConversionMode" }
        }
        Method {
            name: "supportedAudioCodecs"
            type: "QList<AudioCodec>"
            Parameter { name: "m"; type: "ConversionMode" }
        }
        Method {
            name: "fileFormatName"
            type: "QString"
            Parameter { name: "fileFormat"; type: "FileFormat" }
        }
        Method {
            name: "audioCodecName"
            type: "QString"
            Parameter { name: "codec"; type: "AudioCodec" }
        }
        Method {
            name: "videoCodecName"
            type: "QString"
            Parameter { name: "codec"; type: "VideoCodec" }
        }
        Method {
            name: "fileFormatDescription"
            type: "QString"
            Parameter { name: "fileFormat"; type: "QMediaFormat::FileFormat" }
        }
        Method {
            name: "audioCodecDescription"
            type: "QString"
            Parameter { name: "codec"; type: "QMediaFormat::AudioCodec" }
        }
        Method {
            name: "videoCodecDescription"
            type: "QString"
            Parameter { name: "codec"; type: "QMediaFormat::VideoCodec" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaFormat"
        accessSemantics: "value"
        exports: ["QtMultimedia/MediaFormat 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "FileFormat"
            values: [
                "UnspecifiedFormat",
                "WMV",
                "AVI",
                "Matroska",
                "MPEG4",
                "Ogg",
                "QuickTime",
                "WebM",
                "Mpeg4Audio",
                "AAC",
                "WMA",
                "MP3",
                "FLAC",
                "Wave",
                "LastFileFormat"
            ]
        }
        Enum {
            name: "AudioCodec"
            values: [
                "Unspecified",
                "MP3",
                "AAC",
                "AC3",
                "EAC3",
                "FLAC",
                "DolbyTrueHD",
                "Opus",
                "Vorbis",
                "Wave",
                "WMA",
                "ALAC",
                "LastAudioCodec"
            ]
        }
        Enum {
            name: "VideoCodec"
            values: [
                "Unspecified",
                "MPEG1",
                "MPEG2",
                "MPEG4",
                "H264",
                "H265",
                "VP8",
                "VP9",
                "AV1",
                "Theora",
                "WMV",
                "MotionJPEG",
                "LastVideoCodec"
            ]
        }
        Enum {
            name: "ConversionMode"
            values: ["Encode", "Decode"]
        }
        Property {
            name: "fileFormat"
            type: "FileFormat"
            read: "fileFormat"
            write: "setFileFormat"
            index: 0
        }
        Property {
            name: "audioCodec"
            type: "AudioCodec"
            read: "audioCodec"
            write: "setAudioCodec"
            index: 1
        }
        Property {
            name: "videoCodec"
            type: "VideoCodec"
            read: "videoCodec"
            write: "setVideoCodec"
            index: 2
        }
        Method {
            name: "isSupported"
            type: "bool"
            Parameter { name: "mode"; type: "ConversionMode" }
        }
        Method {
            name: "supportedFileFormats"
            type: "QList<FileFormat>"
            Parameter { name: "m"; type: "ConversionMode" }
        }
        Method {
            name: "supportedVideoCodecs"
            type: "QList<VideoCodec>"
            Parameter { name: "m"; type: "ConversionMode" }
        }
        Method {
            name: "supportedAudioCodecs"
            type: "QList<AudioCodec>"
            Parameter { name: "m"; type: "ConversionMode" }
        }
        Method {
            name: "fileFormatName"
            type: "QString"
            Parameter { name: "fileFormat"; type: "FileFormat" }
        }
        Method {
            name: "audioCodecName"
            type: "QString"
            Parameter { name: "codec"; type: "AudioCodec" }
        }
        Method {
            name: "videoCodecName"
            type: "QString"
            Parameter { name: "codec"; type: "VideoCodec" }
        }
        Method {
            name: "fileFormatDescription"
            type: "QString"
            Parameter { name: "fileFormat"; type: "QMediaFormat::FileFormat" }
        }
        Method {
            name: "audioCodecDescription"
            type: "QString"
            Parameter { name: "codec"; type: "QMediaFormat::AudioCodec" }
        }
        Method {
            name: "videoCodecDescription"
            type: "QString"
            Parameter { name: "codec"; type: "QMediaFormat::VideoCodec" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaMetaData"
        accessSemantics: "value"
        exports: ["QtMultimedia/mediaMetaData 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Key"
            values: [
                "Title",
                "Author",
                "Comment",
                "Description",
                "Genre",
                "Date",
                "Language",
                "Publisher",
                "Copyright",
                "Url",
                "Duration",
                "MediaType",
                "FileFormat",
                "AudioBitRate",
                "AudioCodec",
                "VideoBitRate",
                "VideoCodec",
                "VideoFrameRate",
                "AlbumTitle",
                "AlbumArtist",
                "ContributingArtist",
                "TrackNumber",
                "Composer",
                "LeadPerformer",
                "ThumbnailImage",
                "CoverArtImage",
                "Orientation",
                "Resolution"
            ]
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "k"; type: "Key" }
        }
        Method {
            name: "insert"
            Parameter { name: "k"; type: "Key" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            Parameter { name: "k"; type: "Key" }
        }
        Method { name: "keys"; type: "QList<Key>" }
        Method { name: "clear" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "stringValue"
            type: "QString"
            Parameter { name: "k"; type: "Key" }
        }
        Method {
            name: "metaDataKeyToString"
            type: "QString"
            Parameter { name: "k"; type: "Key" }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaMetaData"
        accessSemantics: "value"
        exports: ["QtMultimedia/MediaMetaData 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Key"
            values: [
                "Title",
                "Author",
                "Comment",
                "Description",
                "Genre",
                "Date",
                "Language",
                "Publisher",
                "Copyright",
                "Url",
                "Duration",
                "MediaType",
                "FileFormat",
                "AudioBitRate",
                "AudioCodec",
                "VideoBitRate",
                "VideoCodec",
                "VideoFrameRate",
                "AlbumTitle",
                "AlbumArtist",
                "ContributingArtist",
                "TrackNumber",
                "Composer",
                "LeadPerformer",
                "ThumbnailImage",
                "CoverArtImage",
                "Orientation",
                "Resolution"
            ]
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "k"; type: "Key" }
        }
        Method {
            name: "insert"
            Parameter { name: "k"; type: "Key" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            Parameter { name: "k"; type: "Key" }
        }
        Method { name: "keys"; type: "QList<Key>" }
        Method { name: "clear" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "stringValue"
            type: "QString"
            Parameter { name: "k"; type: "Key" }
        }
        Method {
            name: "metaDataKeyToString"
            type: "QString"
            Parameter { name: "k"; type: "Key" }
        }
    }
    Component {
        file: "qmediaplayer.h"
        name: "QMediaPlayer"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "PlaybackState"
            values: ["StoppedState", "PlayingState", "PausedState"]
        }
        Enum {
            name: "MediaStatus"
            values: [
                "NoMedia",
                "LoadingMedia",
                "LoadedMedia",
                "StalledMedia",
                "BufferingMedia",
                "BufferedMedia",
                "EndOfMedia",
                "InvalidMedia"
            ]
        }
        Enum {
            name: "Error"
            values: [
                "NoError",
                "ResourceError",
                "FormatError",
                "NetworkError",
                "AccessDeniedError"
            ]
        }
        Enum {
            name: "Loops"
            values: ["Infinite", "Once"]
        }
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "duration"
            type: "qlonglong"
            read: "duration"
            notify: "durationChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "position"
            type: "qlonglong"
            read: "position"
            write: "setPosition"
            notify: "positionChanged"
            index: 2
        }
        Property {
            name: "bufferProgress"
            type: "float"
            read: "bufferProgress"
            notify: "bufferProgressChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "hasAudio"
            type: "bool"
            read: "hasAudio"
            notify: "hasAudioChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "hasVideo"
            type: "bool"
            read: "hasVideo"
            notify: "hasVideoChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "seekable"
            type: "bool"
            read: "isSeekable"
            notify: "seekableChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "playbackRate"
            type: "double"
            read: "playbackRate"
            write: "setPlaybackRate"
            notify: "playbackRateChanged"
            index: 7
        }
        Property {
            name: "loops"
            type: "int"
            read: "loops"
            write: "setLoops"
            notify: "loopsChanged"
            index: 8
        }
        Property {
            name: "playbackState"
            type: "PlaybackState"
            read: "playbackState"
            notify: "playbackStateChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "mediaStatus"
            type: "MediaStatus"
            read: "mediaStatus"
            notify: "mediaStatusChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "metaData"
            type: "QMediaMetaData"
            read: "metaData"
            notify: "metaDataChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "error"
            type: "Error"
            read: "error"
            notify: "errorChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "errorString"
            type: "QString"
            read: "errorString"
            notify: "errorChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "videoOutput"
            type: "QObject"
            isPointer: true
            read: "videoOutput"
            write: "setVideoOutput"
            notify: "videoOutputChanged"
            index: 14
        }
        Property {
            name: "audioOutput"
            type: "QAudioOutput"
            isPointer: true
            read: "audioOutput"
            write: "setAudioOutput"
            notify: "audioOutputChanged"
            index: 15
        }
        Property {
            name: "audioTracks"
            type: "QList<QMediaMetaData>"
            read: "audioTracks"
            notify: "tracksChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "videoTracks"
            type: "QList<QMediaMetaData>"
            read: "videoTracks"
            notify: "tracksChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "subtitleTracks"
            type: "QList<QMediaMetaData>"
            read: "subtitleTracks"
            notify: "tracksChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "activeAudioTrack"
            type: "int"
            read: "activeAudioTrack"
            write: "setActiveAudioTrack"
            notify: "activeTracksChanged"
            index: 19
        }
        Property {
            name: "activeVideoTrack"
            type: "int"
            read: "activeVideoTrack"
            write: "setActiveVideoTrack"
            notify: "activeTracksChanged"
            index: 20
        }
        Property {
            name: "activeSubtitleTrack"
            type: "int"
            read: "activeSubtitleTrack"
            write: "setActiveSubtitleTrack"
            notify: "activeTracksChanged"
            index: 21
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "media"; type: "QUrl" }
        }
        Signal {
            name: "playbackStateChanged"
            Parameter { name: "newState"; type: "QMediaPlayer::PlaybackState" }
        }
        Signal {
            name: "mediaStatusChanged"
            Parameter { name: "status"; type: "QMediaPlayer::MediaStatus" }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "qlonglong" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "hasAudioChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "hasVideoChanged"
            Parameter { name: "videoAvailable"; type: "bool" }
        }
        Signal {
            name: "bufferProgressChanged"
            Parameter { name: "progress"; type: "float" }
        }
        Signal {
            name: "seekableChanged"
            Parameter { name: "seekable"; type: "bool" }
        }
        Signal {
            name: "playbackRateChanged"
            Parameter { name: "rate"; type: "double" }
        }
        Signal { name: "loopsChanged" }
        Signal { name: "metaDataChanged" }
        Signal { name: "videoOutputChanged" }
        Signal { name: "audioOutputChanged" }
        Signal { name: "tracksChanged" }
        Signal { name: "activeTracksChanged" }
        Signal { name: "errorChanged" }
        Signal {
            name: "errorOccurred"
            Parameter { name: "error"; type: "QMediaPlayer::Error" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "setPlaybackRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSourceDevice"
            Parameter { name: "device"; type: "QIODevice"; isPointer: true }
            Parameter { name: "sourceUrl"; type: "QUrl" }
        }
        Method {
            name: "setSourceDevice"
            Parameter { name: "device"; type: "QIODevice"; isPointer: true }
        }
    }
    Component {
        file: "qtmultimediaquicktypes_p.h"
        name: "QMediaRecorder"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtMultimedia/MediaRecorder 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Quality"
            values: [
                "VeryLowQuality",
                "LowQuality",
                "NormalQuality",
                "HighQuality",
                "VeryHighQuality"
            ]
        }
        Enum {
            name: "EncodingMode"
            values: [
                "ConstantQualityEncoding",
                "ConstantBitRateEncoding",
                "AverageBitRateEncoding",
                "TwoPassEncoding"
            ]
        }
        Enum {
            name: "RecorderState"
            values: ["StoppedState", "RecordingState", "PausedState"]
        }
        Enum {
            name: "Error"
            values: [
                "NoError",
                "ResourceError",
                "FormatError",
                "OutOfSpaceError",
                "LocationNotWritable"
            ]
        }
        Property {
            name: "recorderState"
            type: "QMediaRecorder::RecorderState"
            read: "recorderState"
            notify: "recorderStateChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "duration"
            type: "qlonglong"
            read: "duration"
            notify: "durationChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "outputLocation"
            type: "QUrl"
            read: "outputLocation"
            write: "setOutputLocation"
            index: 2
        }
        Property {
            name: "actualLocation"
            type: "QUrl"
            read: "actualLocation"
            notify: "actualLocationChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "metaData"
            type: "QMediaMetaData"
            read: "metaData"
            write: "setMetaData"
            notify: "metaDataChanged"
            index: 4
        }
        Property {
            name: "error"
            type: "QMediaRecorder::Error"
            read: "error"
            notify: "errorChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "errorString"
            type: "QString"
            read: "errorString"
            notify: "errorChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "mediaFormat"
            type: "QMediaFormat"
            read: "mediaFormat"
            write: "setMediaFormat"
            notify: "mediaFormatChanged"
            index: 7
        }
        Property { name: "quality"; type: "Quality"; read: "quality"; write: "setQuality"; index: 8 }
        Signal {
            name: "recorderStateChanged"
            Parameter { name: "state"; type: "RecorderState" }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "qlonglong" }
        }
        Signal {
            name: "actualLocationChanged"
            Parameter { name: "location"; type: "QUrl" }
        }
        Signal { name: "encoderSettingsChanged" }
        Signal {
            name: "errorOccurred"
            Parameter { name: "error"; type: "Error" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Signal { name: "errorChanged" }
        Signal { name: "metaDataChanged" }
        Signal { name: "mediaFormatChanged" }
        Signal { name: "encodingModeChanged" }
        Signal { name: "qualityChanged" }
        Signal { name: "videoResolutionChanged" }
        Signal { name: "videoFrameRateChanged" }
        Signal { name: "videoBitRateChanged" }
        Signal { name: "audioBitRateChanged" }
        Signal { name: "audioChannelCountChanged" }
        Signal { name: "audioSampleRateChanged" }
        Method { name: "record" }
        Method { name: "pause" }
        Method { name: "stop" }
    }
    Component {
        file: "qquickimagecapture_p.h"
        name: "QQuickImageCapture"
        accessSemantics: "reference"
        prototype: "QImageCapture"
        exports: ["QtMultimedia/ImageCapture 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "preview"
            type: "QString"
            read: "preview"
            notify: "previewChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "previewChanged" }
        Method {
            name: "saveToFile"
            Parameter { name: "location"; type: "QUrl" }
        }
        Method {
            name: "_q_imageCaptured"
            Parameter { type: "int" }
            Parameter { type: "QImage" }
        }
    }
    Component {
        file: "qquickmediaplayer_p.h"
        name: "QQuickMediaPlayer"
        accessSemantics: "reference"
        prototype: "QMediaPlayer"
        exports: ["QtMultimedia/MediaPlayer 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "source"
            type: "QUrl"
            read: "qmlSource"
            write: "qmlSetSource"
            notify: "sourceChanged"
            index: 0
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
    }
    Component {
        file: "qquicksoundeffect_p.h"
        name: "QQuickSoundEffect"
        accessSemantics: "reference"
        prototype: "QSoundEffect"
        exports: ["QtMultimedia/SoundEffect 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "source"
            type: "QUrl"
            read: "qmlSource"
            write: "qmlSetSource"
            notify: "sourceChanged"
            index: 0
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
    }
    Component {
        file: "qquickvideooutput_p.h"
        name: "QQuickVideoOutput"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtMultimedia/VideoOutput 6.0",
            "QtMultimedia/VideoOutput 6.3"
        ]
        exportMetaObjectRevisions: [1536, 1539]
        Enum {
            name: "FillMode"
            values: ["Stretch", "PreserveAspectFit", "PreserveAspectCrop"]
        }
        Property {
            name: "fillMode"
            type: "FillMode"
            read: "fillMode"
            write: "setFillMode"
            notify: "fillModeChanged"
            index: 0
        }
        Property {
            name: "orientation"
            type: "int"
            read: "orientation"
            write: "setOrientation"
            notify: "orientationChanged"
            index: 1
        }
        Property {
            name: "sourceRect"
            type: "QRectF"
            read: "sourceRect"
            notify: "sourceRectChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "contentRect"
            type: "QRectF"
            read: "contentRect"
            notify: "contentRectChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "videoSink"
            type: "QVideoSink"
            isPointer: true
            read: "videoSink"
            index: 4
            isReadonly: true
        }
        Signal { name: "sourceChanged" }
        Signal {
            name: "fillModeChanged"
            Parameter { type: "QQuickVideoOutput::FillMode" }
        }
        Signal { name: "orientationChanged" }
        Signal { name: "sourceRectChanged" }
        Signal { name: "contentRectChanged" }
        Method {
            name: "_q_newFrame"
            Parameter { type: "QVideoFrame" }
        }
        Method { name: "_q_updateGeometry" }
        Method { name: "_q_invalidateSceneGraph" }
        Method { name: "_q_sceneGraphInitialized" }
        Method { name: "videoSink"; type: "QVideoSink"; isPointer: true }
    }
    Component {
        file: "qsoundeffect.h"
        name: "QSoundEffect"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "Loop"
            values: ["Infinite"]
        }
        Enum {
            name: "Status"
            values: ["Null", "Loading", "Ready", "Error"]
        }
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "loops"
            type: "int"
            read: "loopCount"
            write: "setLoopCount"
            notify: "loopCountChanged"
            index: 1
        }
        Property {
            name: "loopsRemaining"
            type: "int"
            read: "loopsRemaining"
            notify: "loopsRemainingChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "volume"
            type: "float"
            read: "volume"
            write: "setVolume"
            notify: "volumeChanged"
            index: 3
        }
        Property {
            name: "muted"
            type: "bool"
            read: "isMuted"
            write: "setMuted"
            notify: "mutedChanged"
            index: 4
        }
        Property {
            name: "playing"
            type: "bool"
            read: "isPlaying"
            notify: "playingChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "status"
            type: "Status"
            read: "status"
            notify: "statusChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "audioDevice"
            type: "QAudioDevice"
            read: "audioDevice"
            write: "setAudioDevice"
            notify: "audioDeviceChanged"
            index: 7
        }
        Signal { name: "sourceChanged" }
        Signal { name: "loopCountChanged" }
        Signal { name: "loopsRemainingChanged" }
        Signal { name: "volumeChanged" }
        Signal { name: "mutedChanged" }
        Signal { name: "loadedChanged" }
        Signal { name: "playingChanged" }
        Signal { name: "statusChanged" }
        Signal { name: "audioDeviceChanged" }
        Method { name: "play" }
        Method { name: "stop" }
    }
}
